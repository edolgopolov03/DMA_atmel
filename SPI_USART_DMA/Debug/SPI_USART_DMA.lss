
SPI_USART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003110  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          00000604  20000070  00003180  00020064  2**4
                  ALLOC
  5 .stack        00010004  20000674  00003784  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021096  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003264  00000000  00000000  00041181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b1d6  00000000  00000000  000443e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a50  00000000  00000000  0004f5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  0005000b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035f9a  00000000  00000000  00050afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014460  00000000  00000000  00086a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001201da  00000000  00000000  0009aef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021ac  00000000  00000000  001bb0d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 06 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     x.. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	c9 0c 00 00 d5 0c 00 00 e1 0c 00 00 ed 0c 00 00     ................
      cc:	f9 0c 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	51 0e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     Q...............
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1f4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000070 	.word	0x20000070
     280:	00000000 	.word	0x00000000
     284:	00003110 	.word	0x00003110

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003110 	.word	0x00003110
     2c4:	20000074 	.word	0x20000074
     2c8:	00003110 	.word	0x00003110
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	dma_memory_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000007d1 	.word	0x000007d1
     2e4:	0000038d 	.word	0x0000038d
     2e8:	000013dd 	.word	0x000013dd

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b15      	ldr	r3, [pc, #84]	; (348 <Reset_Handler+0x58>)
     2f4:	4a15      	ldr	r2, [pc, #84]	; (34c <Reset_Handler+0x5c>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d009      	beq.n	30e <Reset_Handler+0x1e>
     2fa:	4b13      	ldr	r3, [pc, #76]	; (348 <Reset_Handler+0x58>)
     2fc:	4a13      	ldr	r2, [pc, #76]	; (34c <Reset_Handler+0x5c>)
     2fe:	e003      	b.n	308 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     300:	6811      	ldr	r1, [r2, #0]
     302:	6019      	str	r1, [r3, #0]
     304:	3304      	adds	r3, #4
     306:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     308:	4911      	ldr	r1, [pc, #68]	; (350 <Reset_Handler+0x60>)
     30a:	428b      	cmp	r3, r1
     30c:	d3f8      	bcc.n	300 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <Reset_Handler+0x64>)
     310:	e002      	b.n	318 <Reset_Handler+0x28>
                *pDest++ = 0;
     312:	2200      	movs	r2, #0
     314:	601a      	str	r2, [r3, #0]
     316:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x68>)
     31a:	4293      	cmp	r3, r2
     31c:	d3f9      	bcc.n	312 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x6c>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x70>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x74>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x78>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x54>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	00003110 	.word	0x00003110
     350:	20000064 	.word	0x20000064
     354:	20000070 	.word	0x20000070
     358:	20000674 	.word	0x20000674
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	00001409 	.word	0x00001409
     368:	00001305 	.word	0x00001305

0000036c <dma_transfer_done>:
 * \internal Process transfer done interrupts
 *
 * \param[in] resource The pointer to memory resource
 */
static void dma_transfer_done(struct _dma_resource *resource)
{
     36c:	b508      	push	{r3, lr}
	(void)resource;
	if (descr.memory_cb.complete) {
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <dma_transfer_done+0xc>)
     370:	685b      	ldr	r3, [r3, #4]
     372:	b103      	cbz	r3, 376 <dma_transfer_done+0xa>
		descr.memory_cb.complete();
     374:	4798      	blx	r3
     376:	bd08      	pop	{r3, pc}
     378:	2000008c 	.word	0x2000008c

0000037c <dma_memory_error>:
 * \internal Process transfer error interrupts
 *
 * \param[in] resource The pointer to memory resource
 */
static void dma_memory_error(struct _dma_resource *resource)
{
     37c:	b508      	push	{r3, lr}
	(void)resource;
	if (descr.memory_cb.error) {
     37e:	4b02      	ldr	r3, [pc, #8]	; (388 <dma_memory_error+0xc>)
     380:	689b      	ldr	r3, [r3, #8]
     382:	b103      	cbz	r3, 386 <dma_memory_error+0xa>
		descr.memory_cb.error();
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	2000008c 	.word	0x2000008c

0000038c <dma_memory_init>:

/**
 * \brief Initialize DMA
 */
int32_t dma_memory_init(void)
{
     38c:	b510      	push	{r4, lr}
	_dma_get_channel_resource(&descr.resource, CONF_DMA_MEMORY_CHANNEL);
     38e:	4c06      	ldr	r4, [pc, #24]	; (3a8 <dma_memory_init+0x1c>)
     390:	2100      	movs	r1, #0
     392:	4620      	mov	r0, r4
     394:	4b05      	ldr	r3, [pc, #20]	; (3ac <dma_memory_init+0x20>)
     396:	4798      	blx	r3
	descr.resource->dma_cb.transfer_done = dma_transfer_done;
     398:	6823      	ldr	r3, [r4, #0]
     39a:	4a05      	ldr	r2, [pc, #20]	; (3b0 <dma_memory_init+0x24>)
     39c:	601a      	str	r2, [r3, #0]
	descr.resource->dma_cb.error         = dma_memory_error;
     39e:	6823      	ldr	r3, [r4, #0]
     3a0:	4a04      	ldr	r2, [pc, #16]	; (3b4 <dma_memory_init+0x28>)
     3a2:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
}
     3a4:	2000      	movs	r0, #0
     3a6:	bd10      	pop	{r4, pc}
     3a8:	2000008c 	.word	0x2000008c
     3ac:	00000c99 	.word	0x00000c99
     3b0:	0000036d 	.word	0x0000036d
     3b4:	0000037d 	.word	0x0000037d

000003b8 <dma_memcpy>:

/**
 * \brief Memory copy with dma
 */
int32_t dma_memcpy(void *dst, void *src, uint32_t size)
{
     3b8:	b570      	push	{r4, r5, r6, lr}
     3ba:	4606      	mov	r6, r0
     3bc:	460d      	mov	r5, r1
     3be:	4614      	mov	r4, r2
	_dma_srcinc_enable(CONF_DMA_MEMORY_CHANNEL, true);
     3c0:	2101      	movs	r1, #1
     3c2:	2000      	movs	r0, #0
     3c4:	4b0b      	ldr	r3, [pc, #44]	; (3f4 <dma_memcpy+0x3c>)
     3c6:	4798      	blx	r3
	_dma_dstinc_enable(CONF_DMA_MEMORY_CHANNEL, true);
     3c8:	2101      	movs	r1, #1
     3ca:	2000      	movs	r0, #0
     3cc:	4b0a      	ldr	r3, [pc, #40]	; (3f8 <dma_memcpy+0x40>)
     3ce:	4798      	blx	r3
	_dma_set_destination_address(CONF_DMA_MEMORY_CHANNEL, dst);
     3d0:	4631      	mov	r1, r6
     3d2:	2000      	movs	r0, #0
     3d4:	4b09      	ldr	r3, [pc, #36]	; (3fc <dma_memcpy+0x44>)
     3d6:	4798      	blx	r3
	_dma_set_source_address(CONF_DMA_MEMORY_CHANNEL, src);
     3d8:	4629      	mov	r1, r5
     3da:	2000      	movs	r0, #0
     3dc:	4b08      	ldr	r3, [pc, #32]	; (400 <dma_memcpy+0x48>)
     3de:	4798      	blx	r3
	_dma_set_data_amount(CONF_DMA_MEMORY_CHANNEL, size);
     3e0:	4621      	mov	r1, r4
     3e2:	2000      	movs	r0, #0
     3e4:	4b07      	ldr	r3, [pc, #28]	; (404 <dma_memcpy+0x4c>)
     3e6:	4798      	blx	r3
	_dma_enable_transaction(CONF_DMA_MEMORY_CHANNEL, true);
     3e8:	2101      	movs	r1, #1
     3ea:	2000      	movs	r0, #0
     3ec:	4b06      	ldr	r3, [pc, #24]	; (408 <dma_memcpy+0x50>)
     3ee:	4798      	blx	r3

	return ERR_NONE;
}
     3f0:	2000      	movs	r0, #0
     3f2:	bd70      	pop	{r4, r5, r6, pc}
     3f4:	00000be9 	.word	0x00000be9
     3f8:	00000cad 	.word	0x00000cad
     3fc:	00000bc9 	.word	0x00000bc9
     400:	00000bd9 	.word	0x00000bd9
     404:	00000c05 	.word	0x00000c05
     408:	00000c5d 	.word	0x00000c5d

0000040c <dma_memset>:

/**
 * \brief Memory set with dma
 */
int32_t dma_memset(void *dst, int32_t ch, uint32_t size)
{
     40c:	b538      	push	{r3, r4, r5, lr}
     40e:	4605      	mov	r5, r0
     410:	4614      	mov	r4, r2
	static int32_t tmp_ch;

	tmp_ch = ch;
     412:	4b0e      	ldr	r3, [pc, #56]	; (44c <dma_memset+0x40>)
     414:	f843 1f0c 	str.w	r1, [r3, #12]!

	_dma_set_source_address(CONF_DMA_MEMORY_CHANNEL, &tmp_ch);
     418:	4619      	mov	r1, r3
     41a:	2000      	movs	r0, #0
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <dma_memset+0x44>)
     41e:	4798      	blx	r3
	_dma_srcinc_enable(CONF_DMA_MEMORY_CHANNEL, false);
     420:	2100      	movs	r1, #0
     422:	4608      	mov	r0, r1
     424:	4b0b      	ldr	r3, [pc, #44]	; (454 <dma_memset+0x48>)
     426:	4798      	blx	r3
	_dma_dstinc_enable(CONF_DMA_MEMORY_CHANNEL, true);
     428:	2101      	movs	r1, #1
     42a:	2000      	movs	r0, #0
     42c:	4b0a      	ldr	r3, [pc, #40]	; (458 <dma_memset+0x4c>)
     42e:	4798      	blx	r3
	_dma_set_destination_address(CONF_DMA_MEMORY_CHANNEL, dst);
     430:	4629      	mov	r1, r5
     432:	2000      	movs	r0, #0
     434:	4b09      	ldr	r3, [pc, #36]	; (45c <dma_memset+0x50>)
     436:	4798      	blx	r3
	_dma_set_data_amount(CONF_DMA_MEMORY_CHANNEL, size);
     438:	4621      	mov	r1, r4
     43a:	2000      	movs	r0, #0
     43c:	4b08      	ldr	r3, [pc, #32]	; (460 <dma_memset+0x54>)
     43e:	4798      	blx	r3
	_dma_enable_transaction(CONF_DMA_MEMORY_CHANNEL, true);
     440:	2101      	movs	r1, #1
     442:	2000      	movs	r0, #0
     444:	4b07      	ldr	r3, [pc, #28]	; (464 <dma_memset+0x58>)
     446:	4798      	blx	r3

	return ERR_NONE;
}
     448:	2000      	movs	r0, #0
     44a:	bd38      	pop	{r3, r4, r5, pc}
     44c:	2000008c 	.word	0x2000008c
     450:	00000bd9 	.word	0x00000bd9
     454:	00000be9 	.word	0x00000be9
     458:	00000cad 	.word	0x00000cad
     45c:	00000bc9 	.word	0x00000bc9
     460:	00000c05 	.word	0x00000c05
     464:	00000c5d 	.word	0x00000c5d

00000468 <M2M_DMA_0_complete_cb>:
#define MAX_BUF 50

static volatile uint8_t dma_complete_flag;
static void             M2M_DMA_0_complete_cb(void)
{
  dma_complete_flag = 1;
     468:	2201      	movs	r2, #1
     46a:	4b01      	ldr	r3, [pc, #4]	; (470 <M2M_DMA_0_complete_cb+0x8>)
     46c:	701a      	strb	r2, [r3, #0]
     46e:	4770      	bx	lr
     470:	2000009c 	.word	0x2000009c

00000474 <write_to_usart>:
}

int32_t write_to_usart(const uint8_t *buf){
     474:	b530      	push	{r4, r5, lr}
     476:	b083      	sub	sp, #12
     478:	4604      	mov	r4, r0
  struct io_descriptor *io;
  usart_sync_get_io_descriptor(&USART_0, &io);
     47a:	4d09      	ldr	r5, [pc, #36]	; (4a0 <write_to_usart+0x2c>)
     47c:	a901      	add	r1, sp, #4
     47e:	4628      	mov	r0, r5
     480:	4b08      	ldr	r3, [pc, #32]	; (4a4 <write_to_usart+0x30>)
     482:	4798      	blx	r3
  usart_sync_enable(&USART_0);
     484:	4628      	mov	r0, r5
     486:	4b08      	ldr	r3, [pc, #32]	; (4a8 <write_to_usart+0x34>)
     488:	4798      	blx	r3

  return io_write(io, buf, strlen(buf));
     48a:	4620      	mov	r0, r4
     48c:	4b07      	ldr	r3, [pc, #28]	; (4ac <write_to_usart+0x38>)
     48e:	4798      	blx	r3
     490:	b282      	uxth	r2, r0
     492:	4621      	mov	r1, r4
     494:	9801      	ldr	r0, [sp, #4]
     496:	4b06      	ldr	r3, [pc, #24]	; (4b0 <write_to_usart+0x3c>)
     498:	4798      	blx	r3
}
     49a:	b003      	add	sp, #12
     49c:	bd30      	pop	{r4, r5, pc}
     49e:	bf00      	nop
     4a0:	20000254 	.word	0x20000254
     4a4:	00000ab1 	.word	0x00000ab1
     4a8:	00000a85 	.word	0x00000a85
     4ac:	00001b65 	.word	0x00001b65
     4b0:	000007f5 	.word	0x000007f5

000004b4 <dma_write_memory>:

int32_t  dma_write_memory(void *dst, const uint8_t *str){
     4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4b6:	4605      	mov	r5, r0
     4b8:	460e      	mov	r6, r1
  int32_t err;
  size_t len = strlen(str);
     4ba:	4608      	mov	r0, r1
     4bc:	4b0d      	ldr	r3, [pc, #52]	; (4f4 <dma_write_memory+0x40>)
     4be:	4798      	blx	r3
     4c0:	4607      	mov	r7, r0
  for(int i = 0; i < len; i++){
     4c2:	2400      	movs	r4, #0
     4c4:	42a7      	cmp	r7, r4
     4c6:	d913      	bls.n	4f0 <dma_write_memory+0x3c>
    err = dma_memset(dst, str[i], sizeof(uint8_t));
     4c8:	2201      	movs	r2, #1
     4ca:	5d31      	ldrb	r1, [r6, r4]
     4cc:	4628      	mov	r0, r5
     4ce:	4b0a      	ldr	r3, [pc, #40]	; (4f8 <dma_write_memory+0x44>)
     4d0:	4798      	blx	r3
    if(err){
     4d2:	b910      	cbnz	r0, 4da <dma_write_memory+0x26>
      printf("dma_memset() failed: %s\n", strerror(errno));
      return DMA_MEMORY_ERROR_CB;
    }
    dst++;
     4d4:	3501      	adds	r5, #1
  for(int i = 0; i < len; i++){
     4d6:	3401      	adds	r4, #1
     4d8:	e7f4      	b.n	4c4 <dma_write_memory+0x10>
      printf("dma_memset() failed: %s\n", strerror(errno));
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <dma_write_memory+0x48>)
     4dc:	4798      	blx	r3
     4de:	6800      	ldr	r0, [r0, #0]
     4e0:	4b07      	ldr	r3, [pc, #28]	; (500 <dma_write_memory+0x4c>)
     4e2:	4798      	blx	r3
     4e4:	4601      	mov	r1, r0
     4e6:	4807      	ldr	r0, [pc, #28]	; (504 <dma_write_memory+0x50>)
     4e8:	4b07      	ldr	r3, [pc, #28]	; (508 <dma_write_memory+0x54>)
     4ea:	4798      	blx	r3
      return DMA_MEMORY_ERROR_CB;
     4ec:	2001      	movs	r0, #1
     4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  return ERR_NONE;
     4f0:	2000      	movs	r0, #0
}
     4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4f4:	00001b65 	.word	0x00001b65
     4f8:	0000040d 	.word	0x0000040d
     4fc:	000013fd 	.word	0x000013fd
     500:	00001b51 	.word	0x00001b51
     504:	00002864 	.word	0x00002864
     508:	000015c9 	.word	0x000015c9

0000050c <dma_usart_copy>:

int32_t  dma_usart_copy(){
     50c:	b570      	push	{r4, r5, r6, lr}
  int32_t err;
  err = dma_memory_init();
     50e:	4b1a      	ldr	r3, [pc, #104]	; (578 <dma_usart_copy+0x6c>)
     510:	4798      	blx	r3
  if(err){
     512:	b970      	cbnz	r0, 532 <dma_usart_copy+0x26>
    printf("dma_memory_init() failed: %s\n", strerror(errno));
  }

  uint8_t *buf1 = malloc(MAX_BUF * sizeof(uint8_t));
     514:	2032      	movs	r0, #50	; 0x32
     516:	4c19      	ldr	r4, [pc, #100]	; (57c <dma_usart_copy+0x70>)
     518:	47a0      	blx	r4
     51a:	4605      	mov	r5, r0
  uint8_t *buf2 = malloc(MAX_BUF * sizeof(uint8_t));
     51c:	2032      	movs	r0, #50	; 0x32
     51e:	47a0      	blx	r4
     520:	4606      	mov	r6, r0
  
  err = dma_write_memory(buf1, (uint8_t *)"hello world!");
     522:	4917      	ldr	r1, [pc, #92]	; (580 <dma_usart_copy+0x74>)
     524:	4628      	mov	r0, r5
     526:	4b17      	ldr	r3, [pc, #92]	; (584 <dma_usart_copy+0x78>)
     528:	4798      	blx	r3
  if(err){
     52a:	b160      	cbz	r0, 546 <dma_usart_copy+0x3a>
    return DMA_MEMORY_ERROR_CB;
     52c:	2401      	movs	r4, #1
  //while(1){
    write_to_usart(buf2);
    //sleep(1);    
  //}
  return ERR_NONE;
     52e:	4620      	mov	r0, r4
     530:	bd70      	pop	{r4, r5, r6, pc}
    printf("dma_memory_init() failed: %s\n", strerror(errno));
     532:	4b15      	ldr	r3, [pc, #84]	; (588 <dma_usart_copy+0x7c>)
     534:	4798      	blx	r3
     536:	6800      	ldr	r0, [r0, #0]
     538:	4b14      	ldr	r3, [pc, #80]	; (58c <dma_usart_copy+0x80>)
     53a:	4798      	blx	r3
     53c:	4601      	mov	r1, r0
     53e:	4814      	ldr	r0, [pc, #80]	; (590 <dma_usart_copy+0x84>)
     540:	4b14      	ldr	r3, [pc, #80]	; (594 <dma_usart_copy+0x88>)
     542:	4798      	blx	r3
     544:	e7e6      	b.n	514 <dma_usart_copy+0x8>
  err = dma_memcpy(buf2, buf1, 12);
     546:	220c      	movs	r2, #12
     548:	4629      	mov	r1, r5
     54a:	4630      	mov	r0, r6
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <dma_usart_copy+0x8c>)
     54e:	4798      	blx	r3
  if(err){
     550:	4604      	mov	r4, r0
     552:	b928      	cbnz	r0, 560 <dma_usart_copy+0x54>
  M2M_DMA_0_complete_cb();
     554:	4b11      	ldr	r3, [pc, #68]	; (59c <dma_usart_copy+0x90>)
     556:	4798      	blx	r3
    write_to_usart(buf2);
     558:	4630      	mov	r0, r6
     55a:	4b11      	ldr	r3, [pc, #68]	; (5a0 <dma_usart_copy+0x94>)
     55c:	4798      	blx	r3
  return ERR_NONE;
     55e:	e7e6      	b.n	52e <dma_usart_copy+0x22>
    printf("dma_memcpy() failed: %s\n", strerror(errno));
     560:	4b09      	ldr	r3, [pc, #36]	; (588 <dma_usart_copy+0x7c>)
     562:	4798      	blx	r3
     564:	6800      	ldr	r0, [r0, #0]
     566:	4b09      	ldr	r3, [pc, #36]	; (58c <dma_usart_copy+0x80>)
     568:	4798      	blx	r3
     56a:	4601      	mov	r1, r0
     56c:	480d      	ldr	r0, [pc, #52]	; (5a4 <dma_usart_copy+0x98>)
     56e:	4b09      	ldr	r3, [pc, #36]	; (594 <dma_usart_copy+0x88>)
     570:	4798      	blx	r3
    return DMA_MEMORY_ERROR_CB;
     572:	2401      	movs	r4, #1
     574:	e7db      	b.n	52e <dma_usart_copy+0x22>
     576:	bf00      	nop
     578:	0000038d 	.word	0x0000038d
     57c:	00001451 	.word	0x00001451
     580:	000028a0 	.word	0x000028a0
     584:	000004b5 	.word	0x000004b5
     588:	000013fd 	.word	0x000013fd
     58c:	00001b51 	.word	0x00001b51
     590:	00002880 	.word	0x00002880
     594:	000015c9 	.word	0x000015c9
     598:	000003b9 	.word	0x000003b9
     59c:	00000469 	.word	0x00000469
     5a0:	00000475 	.word	0x00000475
     5a4:	000028b0 	.word	0x000028b0

000005a8 <TARGET_IO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a8:	4b10      	ldr	r3, [pc, #64]	; (5ec <TARGET_IO_PORT_init+0x44>)
     5aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ba:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5be:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5da:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5de:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
     5ea:	4770      	bx	lr
     5ec:	41008000 	.word	0x41008000

000005f0 <TARGET_IO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     5f0:	4b06      	ldr	r3, [pc, #24]	; (60c <TARGET_IO_CLOCK_init+0x1c>)
     5f2:	2240      	movs	r2, #64	; 0x40
     5f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     5f8:	2243      	movs	r2, #67	; 0x43
     5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     5fe:	4a04      	ldr	r2, [pc, #16]	; (610 <TARGET_IO_CLOCK_init+0x20>)
     600:	6953      	ldr	r3, [r2, #20]
     602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     606:	6153      	str	r3, [r2, #20]
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	40001c00 	.word	0x40001c00
     610:	40000800 	.word	0x40000800

00000614 <TARGET_IO_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void TARGET_IO_init(void)
{
     614:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <TARGET_IO_init+0x18>)
     618:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM0, (void *)NULL);
     61a:	2200      	movs	r2, #0
     61c:	4904      	ldr	r1, [pc, #16]	; (630 <TARGET_IO_init+0x1c>)
     61e:	4805      	ldr	r0, [pc, #20]	; (634 <TARGET_IO_init+0x20>)
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <TARGET_IO_init+0x24>)
     622:	4798      	blx	r3
	TARGET_IO_PORT_init();
     624:	4b05      	ldr	r3, [pc, #20]	; (63c <TARGET_IO_init+0x28>)
     626:	4798      	blx	r3
     628:	bd08      	pop	{r3, pc}
     62a:	bf00      	nop
     62c:	000005f1 	.word	0x000005f1
     630:	40003000 	.word	0x40003000
     634:	20000230 	.word	0x20000230
     638:	00000a39 	.word	0x00000a39
     63c:	000005a9 	.word	0x000005a9

00000640 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     640:	4b28      	ldr	r3, [pc, #160]	; (6e4 <SPI_0_PORT_init+0xa4>)
     642:	2201      	movs	r2, #1
     644:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     646:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     648:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     652:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     654:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     664:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     668:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     66c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     674:	2202      	movs	r2, #2
     676:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     678:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     67e:	629a      	str	r2, [r3, #40]	; 0x28
     680:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     682:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     686:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     692:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     696:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     69a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     69e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     6a6:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a8:	4a0f      	ldr	r2, [pc, #60]	; (6e8 <SPI_0_PORT_init+0xa8>)
     6aa:	629a      	str	r2, [r3, #40]	; 0x28
     6ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     6b0:	3204      	adds	r2, #4
     6b2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6b4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     6b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c0:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     6c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6c8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6d8:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     6e0:	4770      	bx	lr
     6e2:	bf00      	nop
     6e4:	41008000 	.word	0x41008000
     6e8:	40020000 	.word	0x40020000

000006ec <SPI_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <SPI_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <SPI_0_CLOCK_init+0x20>)
     6fc:	6953      	ldr	r3, [r2, #20]
     6fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     702:	6153      	str	r3, [r2, #20]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void SPI_0_init(void)
{
     710:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     712:	4b04      	ldr	r3, [pc, #16]	; (724 <SPI_0_init+0x14>)
     714:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     716:	4904      	ldr	r1, [pc, #16]	; (728 <SPI_0_init+0x18>)
     718:	4804      	ldr	r0, [pc, #16]	; (72c <SPI_0_init+0x1c>)
     71a:	4b05      	ldr	r3, [pc, #20]	; (730 <SPI_0_init+0x20>)
     71c:	4798      	blx	r3
	SPI_0_PORT_init();
     71e:	4b05      	ldr	r3, [pc, #20]	; (734 <SPI_0_init+0x24>)
     720:	4798      	blx	r3
     722:	bd08      	pop	{r3, pc}
     724:	000006ed 	.word	0x000006ed
     728:	40003400 	.word	0x40003400
     72c:	2000023c 	.word	0x2000023c
     730:	0000085d 	.word	0x0000085d
     734:	00000641 	.word	0x00000641

00000738 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     738:	4b10      	ldr	r3, [pc, #64]	; (77c <USART_0_PORT_init+0x44>)
     73a:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     73e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     742:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     746:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     74a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     74e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     752:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     756:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     75a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     75e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     762:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     766:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     76a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     76e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     772:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     776:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     77a:	4770      	bx	lr
     77c:	41008000 	.word	0x41008000

00000780 <USART_0_CLOCK_init>:
     780:	4b06      	ldr	r3, [pc, #24]	; (79c <USART_0_CLOCK_init+0x1c>)
     782:	2240      	movs	r2, #64	; 0x40
     784:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     788:	2243      	movs	r2, #67	; 0x43
     78a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     78e:	4a04      	ldr	r2, [pc, #16]	; (7a0 <USART_0_CLOCK_init+0x20>)
     790:	6a13      	ldr	r3, [r2, #32]
     792:	f043 0308 	orr.w	r3, r3, #8
     796:	6213      	str	r3, [r2, #32]
     798:	4770      	bx	lr
     79a:	bf00      	nop
     79c:	40001c00 	.word	0x40001c00
     7a0:	40000800 	.word	0x40000800

000007a4 <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void USART_0_init(void)
{
     7a4:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     7a6:	4b05      	ldr	r3, [pc, #20]	; (7bc <USART_0_init+0x18>)
     7a8:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM7, (void *)NULL);
     7aa:	2200      	movs	r2, #0
     7ac:	4904      	ldr	r1, [pc, #16]	; (7c0 <USART_0_init+0x1c>)
     7ae:	4805      	ldr	r0, [pc, #20]	; (7c4 <USART_0_init+0x20>)
     7b0:	4b05      	ldr	r3, [pc, #20]	; (7c8 <USART_0_init+0x24>)
     7b2:	4798      	blx	r3
	USART_0_PORT_init();
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <USART_0_init+0x28>)
     7b6:	4798      	blx	r3
     7b8:	bd08      	pop	{r3, pc}
     7ba:	bf00      	nop
     7bc:	00000781 	.word	0x00000781
     7c0:	43000c00 	.word	0x43000c00
     7c4:	20000254 	.word	0x20000254
     7c8:	00000a39 	.word	0x00000a39
     7cc:	00000739 	.word	0x00000739

000007d0 <system_init>:
}

void system_init(void)
{
     7d0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7d2:	4b04      	ldr	r3, [pc, #16]	; (7e4 <system_init+0x14>)
     7d4:	4798      	blx	r3
	init_mcu();

	TARGET_IO_init();
     7d6:	4b04      	ldr	r3, [pc, #16]	; (7e8 <system_init+0x18>)
     7d8:	4798      	blx	r3

	SPI_0_init();
     7da:	4b04      	ldr	r3, [pc, #16]	; (7ec <system_init+0x1c>)
     7dc:	4798      	blx	r3

	USART_0_init();
     7de:	4b04      	ldr	r3, [pc, #16]	; (7f0 <system_init+0x20>)
     7e0:	4798      	blx	r3
     7e2:	bd08      	pop	{r3, pc}
     7e4:	00000b21 	.word	0x00000b21
     7e8:	00000615 	.word	0x00000615
     7ec:	00000711 	.word	0x00000711
     7f0:	000007a5 	.word	0x000007a5

000007f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	460d      	mov	r5, r1
     7f8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     7fa:	4604      	mov	r4, r0
     7fc:	b168      	cbz	r0, 81a <io_write+0x26>
     7fe:	b151      	cbz	r1, 816 <io_write+0x22>
     800:	2001      	movs	r0, #1
     802:	2234      	movs	r2, #52	; 0x34
     804:	4906      	ldr	r1, [pc, #24]	; (820 <io_write+0x2c>)
     806:	4b07      	ldr	r3, [pc, #28]	; (824 <io_write+0x30>)
     808:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     80a:	6823      	ldr	r3, [r4, #0]
     80c:	4632      	mov	r2, r6
     80e:	4629      	mov	r1, r5
     810:	4620      	mov	r0, r4
     812:	4798      	blx	r3
}
     814:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     816:	2000      	movs	r0, #0
     818:	e7f3      	b.n	802 <io_write+0xe>
     81a:	2000      	movs	r0, #0
     81c:	e7f1      	b.n	802 <io_write+0xe>
     81e:	bf00      	nop
     820:	000028cc 	.word	0x000028cc
     824:	00000add 	.word	0x00000add

00000828 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     828:	b570      	push	{r4, r5, r6, lr}
     82a:	460d      	mov	r5, r1
     82c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     82e:	4604      	mov	r4, r0
     830:	b168      	cbz	r0, 84e <io_read+0x26>
     832:	b151      	cbz	r1, 84a <io_read+0x22>
     834:	2001      	movs	r0, #1
     836:	223d      	movs	r2, #61	; 0x3d
     838:	4906      	ldr	r1, [pc, #24]	; (854 <io_read+0x2c>)
     83a:	4b07      	ldr	r3, [pc, #28]	; (858 <io_read+0x30>)
     83c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     83e:	6863      	ldr	r3, [r4, #4]
     840:	4632      	mov	r2, r6
     842:	4629      	mov	r1, r5
     844:	4620      	mov	r0, r4
     846:	4798      	blx	r3
}
     848:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     84a:	2000      	movs	r0, #0
     84c:	e7f3      	b.n	836 <io_read+0xe>
     84e:	2000      	movs	r0, #0
     850:	e7f1      	b.n	836 <io_read+0xe>
     852:	bf00      	nop
     854:	000028cc 	.word	0x000028cc
     858:	00000add 	.word	0x00000add

0000085c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     85c:	b538      	push	{r3, r4, r5, lr}
     85e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     860:	4604      	mov	r4, r0
     862:	b1c0      	cbz	r0, 896 <spi_m_sync_init+0x3a>
     864:	b1a9      	cbz	r1, 892 <spi_m_sync_init+0x36>
     866:	2001      	movs	r0, #1
     868:	2240      	movs	r2, #64	; 0x40
     86a:	490c      	ldr	r1, [pc, #48]	; (89c <spi_m_sync_init+0x40>)
     86c:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <spi_m_sync_init+0x44>)
     86e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     870:	4620      	mov	r0, r4
     872:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     876:	4629      	mov	r1, r5
     878:	4b0a      	ldr	r3, [pc, #40]	; (8a4 <spi_m_sync_init+0x48>)
     87a:	4798      	blx	r3

	if (rc < 0) {
     87c:	2800      	cmp	r0, #0
     87e:	db07      	blt.n	890 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     884:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     886:	4b08      	ldr	r3, [pc, #32]	; (8a8 <spi_m_sync_init+0x4c>)
     888:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     88a:	4b08      	ldr	r3, [pc, #32]	; (8ac <spi_m_sync_init+0x50>)
     88c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     88e:	2000      	movs	r0, #0
}
     890:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     892:	2000      	movs	r0, #0
     894:	e7e8      	b.n	868 <spi_m_sync_init+0xc>
     896:	2000      	movs	r0, #0
     898:	e7e6      	b.n	868 <spi_m_sync_init+0xc>
     89a:	bf00      	nop
     89c:	000028e0 	.word	0x000028e0
     8a0:	00000add 	.word	0x00000add
     8a4:	00001089 	.word	0x00001089
     8a8:	00000931 	.word	0x00000931
     8ac:	000008f5 	.word	0x000008f5

000008b0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     8b0:	b530      	push	{r4, r5, lr}
     8b2:	b085      	sub	sp, #20
     8b4:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     8b6:	4605      	mov	r5, r0
     8b8:	b198      	cbz	r0, 8e2 <spi_m_sync_transfer+0x32>
     8ba:	b181      	cbz	r1, 8de <spi_m_sync_transfer+0x2e>
     8bc:	2001      	movs	r0, #1
     8be:	22b3      	movs	r2, #179	; 0xb3
     8c0:	4909      	ldr	r1, [pc, #36]	; (8e8 <spi_m_sync_transfer+0x38>)
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <spi_m_sync_transfer+0x3c>)
     8c4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     8c6:	6823      	ldr	r3, [r4, #0]
     8c8:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     8ca:	6863      	ldr	r3, [r4, #4]
     8cc:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     8ce:	68a3      	ldr	r3, [r4, #8]
     8d0:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     8d2:	a901      	add	r1, sp, #4
     8d4:	1d28      	adds	r0, r5, #4
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <spi_m_sync_transfer+0x40>)
     8d8:	4798      	blx	r3
}
     8da:	b005      	add	sp, #20
     8dc:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     8de:	2000      	movs	r0, #0
     8e0:	e7ed      	b.n	8be <spi_m_sync_transfer+0xe>
     8e2:	2000      	movs	r0, #0
     8e4:	e7eb      	b.n	8be <spi_m_sync_transfer+0xe>
     8e6:	bf00      	nop
     8e8:	000028e0 	.word	0x000028e0
     8ec:	00000add 	.word	0x00000add
     8f0:	00001205 	.word	0x00001205

000008f4 <_spi_m_sync_io_write>:
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	460e      	mov	r6, r1
     8fa:	4615      	mov	r5, r2
	ASSERT(io);
     8fc:	4604      	mov	r4, r0
     8fe:	22a3      	movs	r2, #163	; 0xa3
     900:	4908      	ldr	r1, [pc, #32]	; (924 <_spi_m_sync_io_write+0x30>)
     902:	3000      	adds	r0, #0
     904:	bf18      	it	ne
     906:	2001      	movne	r0, #1
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <_spi_m_sync_io_write+0x34>)
     90a:	4798      	blx	r3
	xfer.rxbuf = 0;
     90c:	2300      	movs	r3, #0
     90e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     910:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     912:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     914:	a901      	add	r1, sp, #4
     916:	f1a4 000c 	sub.w	r0, r4, #12
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <_spi_m_sync_io_write+0x38>)
     91c:	4798      	blx	r3
}
     91e:	b004      	add	sp, #16
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	bf00      	nop
     924:	000028e0 	.word	0x000028e0
     928:	00000add 	.word	0x00000add
     92c:	000008b1 	.word	0x000008b1

00000930 <_spi_m_sync_io_read>:
{
     930:	b570      	push	{r4, r5, r6, lr}
     932:	b084      	sub	sp, #16
     934:	460e      	mov	r6, r1
     936:	4615      	mov	r5, r2
	ASSERT(io);
     938:	4604      	mov	r4, r0
     93a:	2287      	movs	r2, #135	; 0x87
     93c:	4908      	ldr	r1, [pc, #32]	; (960 <_spi_m_sync_io_read+0x30>)
     93e:	3000      	adds	r0, #0
     940:	bf18      	it	ne
     942:	2001      	movne	r0, #1
     944:	4b07      	ldr	r3, [pc, #28]	; (964 <_spi_m_sync_io_read+0x34>)
     946:	4798      	blx	r3
	xfer.rxbuf = buf;
     948:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     94a:	2300      	movs	r3, #0
     94c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     94e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     950:	a901      	add	r1, sp, #4
     952:	f1a4 000c 	sub.w	r0, r4, #12
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <_spi_m_sync_io_read+0x38>)
     958:	4798      	blx	r3
}
     95a:	b004      	add	sp, #16
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	bf00      	nop
     960:	000028e0 	.word	0x000028e0
     964:	00000add 	.word	0x00000add
     968:	000008b1 	.word	0x000008b1

0000096c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96e:	460e      	mov	r6, r1
     970:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     972:	4605      	mov	r5, r0
     974:	b308      	cbz	r0, 9ba <usart_sync_write+0x4e>
     976:	b311      	cbz	r1, 9be <usart_sync_write+0x52>
     978:	bb1a      	cbnz	r2, 9c2 <usart_sync_write+0x56>
     97a:	2000      	movs	r0, #0
     97c:	22f1      	movs	r2, #241	; 0xf1
     97e:	4912      	ldr	r1, [pc, #72]	; (9c8 <usart_sync_write+0x5c>)
     980:	4b12      	ldr	r3, [pc, #72]	; (9cc <usart_sync_write+0x60>)
     982:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     984:	f105 0408 	add.w	r4, r5, #8
     988:	4620      	mov	r0, r4
     98a:	4b11      	ldr	r3, [pc, #68]	; (9d0 <usart_sync_write+0x64>)
     98c:	4798      	blx	r3
     98e:	2800      	cmp	r0, #0
     990:	d0f8      	beq.n	984 <usart_sync_write+0x18>
     992:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     994:	5d71      	ldrb	r1, [r6, r5]
     996:	4620      	mov	r0, r4
     998:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <usart_sync_write+0x68>)
     99a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     99c:	4620      	mov	r0, r4
     99e:	4b0c      	ldr	r3, [pc, #48]	; (9d0 <usart_sync_write+0x64>)
     9a0:	4798      	blx	r3
     9a2:	2800      	cmp	r0, #0
     9a4:	d0fa      	beq.n	99c <usart_sync_write+0x30>
			;
	} while (++offset < length);
     9a6:	3501      	adds	r5, #1
     9a8:	42bd      	cmp	r5, r7
     9aa:	d3f3      	bcc.n	994 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     9ac:	4620      	mov	r0, r4
     9ae:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <usart_sync_write+0x6c>)
     9b0:	4798      	blx	r3
     9b2:	2800      	cmp	r0, #0
     9b4:	d0fa      	beq.n	9ac <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     9b6:	4628      	mov	r0, r5
     9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     9ba:	2000      	movs	r0, #0
     9bc:	e7de      	b.n	97c <usart_sync_write+0x10>
     9be:	2000      	movs	r0, #0
     9c0:	e7dc      	b.n	97c <usart_sync_write+0x10>
     9c2:	2001      	movs	r0, #1
     9c4:	e7da      	b.n	97c <usart_sync_write+0x10>
     9c6:	bf00      	nop
     9c8:	000028fc 	.word	0x000028fc
     9cc:	00000add 	.word	0x00000add
     9d0:	0000106b 	.word	0x0000106b
     9d4:	0000105d 	.word	0x0000105d
     9d8:	00001075 	.word	0x00001075

000009dc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9e0:	460f      	mov	r7, r1
     9e2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     9e4:	4605      	mov	r5, r0
     9e6:	b1c8      	cbz	r0, a1c <usart_sync_read+0x40>
     9e8:	b1d1      	cbz	r1, a20 <usart_sync_read+0x44>
     9ea:	b9da      	cbnz	r2, a24 <usart_sync_read+0x48>
     9ec:	2000      	movs	r0, #0
     9ee:	f44f 7286 	mov.w	r2, #268	; 0x10c
     9f2:	490d      	ldr	r1, [pc, #52]	; (a28 <usart_sync_read+0x4c>)
     9f4:	4b0d      	ldr	r3, [pc, #52]	; (a2c <usart_sync_read+0x50>)
     9f6:	4798      	blx	r3
	uint32_t                      offset = 0;
     9f8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     9fa:	f105 0408 	add.w	r4, r5, #8
     9fe:	4620      	mov	r0, r4
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <usart_sync_read+0x54>)
     a02:	4798      	blx	r3
     a04:	2800      	cmp	r0, #0
     a06:	d0f8      	beq.n	9fa <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     a08:	4620      	mov	r0, r4
     a0a:	4b0a      	ldr	r3, [pc, #40]	; (a34 <usart_sync_read+0x58>)
     a0c:	4798      	blx	r3
     a0e:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     a10:	3601      	adds	r6, #1
     a12:	4546      	cmp	r6, r8
     a14:	d3f1      	bcc.n	9fa <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     a16:	4630      	mov	r0, r6
     a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     a1c:	2000      	movs	r0, #0
     a1e:	e7e6      	b.n	9ee <usart_sync_read+0x12>
     a20:	2000      	movs	r0, #0
     a22:	e7e4      	b.n	9ee <usart_sync_read+0x12>
     a24:	2001      	movs	r0, #1
     a26:	e7e2      	b.n	9ee <usart_sync_read+0x12>
     a28:	000028fc 	.word	0x000028fc
     a2c:	00000add 	.word	0x00000add
     a30:	0000107f 	.word	0x0000107f
     a34:	00001063 	.word	0x00001063

00000a38 <usart_sync_init>:
{
     a38:	b538      	push	{r3, r4, r5, lr}
     a3a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     a3c:	4604      	mov	r4, r0
     a3e:	b1a0      	cbz	r0, a6a <usart_sync_init+0x32>
     a40:	b189      	cbz	r1, a66 <usart_sync_init+0x2e>
     a42:	2001      	movs	r0, #1
     a44:	2234      	movs	r2, #52	; 0x34
     a46:	490a      	ldr	r1, [pc, #40]	; (a70 <usart_sync_init+0x38>)
     a48:	4b0a      	ldr	r3, [pc, #40]	; (a74 <usart_sync_init+0x3c>)
     a4a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     a4c:	4629      	mov	r1, r5
     a4e:	f104 0008 	add.w	r0, r4, #8
     a52:	4b09      	ldr	r3, [pc, #36]	; (a78 <usart_sync_init+0x40>)
     a54:	4798      	blx	r3
	if (init_status) {
     a56:	4603      	mov	r3, r0
     a58:	b918      	cbnz	r0, a62 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     a5a:	4a08      	ldr	r2, [pc, #32]	; (a7c <usart_sync_init+0x44>)
     a5c:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     a5e:	4a08      	ldr	r2, [pc, #32]	; (a80 <usart_sync_init+0x48>)
     a60:	6022      	str	r2, [r4, #0]
}
     a62:	4618      	mov	r0, r3
     a64:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     a66:	2000      	movs	r0, #0
     a68:	e7ec      	b.n	a44 <usart_sync_init+0xc>
     a6a:	2000      	movs	r0, #0
     a6c:	e7ea      	b.n	a44 <usart_sync_init+0xc>
     a6e:	bf00      	nop
     a70:	000028fc 	.word	0x000028fc
     a74:	00000add 	.word	0x00000add
     a78:	0000101d 	.word	0x0000101d
     a7c:	000009dd 	.word	0x000009dd
     a80:	0000096d 	.word	0x0000096d

00000a84 <usart_sync_enable>:
{
     a84:	b510      	push	{r4, lr}
	ASSERT(descr);
     a86:	4604      	mov	r4, r0
     a88:	2253      	movs	r2, #83	; 0x53
     a8a:	4906      	ldr	r1, [pc, #24]	; (aa4 <usart_sync_enable+0x20>)
     a8c:	3000      	adds	r0, #0
     a8e:	bf18      	it	ne
     a90:	2001      	movne	r0, #1
     a92:	4b05      	ldr	r3, [pc, #20]	; (aa8 <usart_sync_enable+0x24>)
     a94:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a96:	f104 0008 	add.w	r0, r4, #8
     a9a:	4b04      	ldr	r3, [pc, #16]	; (aac <usart_sync_enable+0x28>)
     a9c:	4798      	blx	r3
}
     a9e:	2000      	movs	r0, #0
     aa0:	bd10      	pop	{r4, pc}
     aa2:	bf00      	nop
     aa4:	000028fc 	.word	0x000028fc
     aa8:	00000add 	.word	0x00000add
     aac:	00001049 	.word	0x00001049

00000ab0 <usart_sync_get_io_descriptor>:
{
     ab0:	b538      	push	{r3, r4, r5, lr}
     ab2:	460c      	mov	r4, r1
	ASSERT(descr && io);
     ab4:	4605      	mov	r5, r0
     ab6:	b150      	cbz	r0, ace <usart_sync_get_io_descriptor+0x1e>
     ab8:	b139      	cbz	r1, aca <usart_sync_get_io_descriptor+0x1a>
     aba:	2001      	movs	r0, #1
     abc:	2269      	movs	r2, #105	; 0x69
     abe:	4905      	ldr	r1, [pc, #20]	; (ad4 <usart_sync_get_io_descriptor+0x24>)
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <usart_sync_get_io_descriptor+0x28>)
     ac2:	4798      	blx	r3
	*io = &descr->io;
     ac4:	6025      	str	r5, [r4, #0]
}
     ac6:	2000      	movs	r0, #0
     ac8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && io);
     aca:	2000      	movs	r0, #0
     acc:	e7f6      	b.n	abc <usart_sync_get_io_descriptor+0xc>
     ace:	2000      	movs	r0, #0
     ad0:	e7f4      	b.n	abc <usart_sync_get_io_descriptor+0xc>
     ad2:	bf00      	nop
     ad4:	000028fc 	.word	0x000028fc
     ad8:	00000add 	.word	0x00000add

00000adc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     adc:	b900      	cbnz	r0, ae0 <assert+0x4>
		__asm("BKPT #0");
     ade:	be00      	bkpt	0x0000
     ae0:	4770      	bx	lr
	...

00000ae4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     ae4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     ae6:	4a06      	ldr	r2, [pc, #24]	; (b00 <_sbrk+0x1c>)
     ae8:	6812      	ldr	r2, [r2, #0]
     aea:	b122      	cbz	r2, af6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     aec:	4a04      	ldr	r2, [pc, #16]	; (b00 <_sbrk+0x1c>)
     aee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     af0:	4403      	add	r3, r0
     af2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     af4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     af6:	4903      	ldr	r1, [pc, #12]	; (b04 <_sbrk+0x20>)
     af8:	4a01      	ldr	r2, [pc, #4]	; (b00 <_sbrk+0x1c>)
     afa:	6011      	str	r1, [r2, #0]
     afc:	e7f6      	b.n	aec <_sbrk+0x8>
     afe:	bf00      	nop
     b00:	200000a0 	.word	0x200000a0
     b04:	20010678 	.word	0x20010678

00000b08 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     b08:	f04f 30ff 	mov.w	r0, #4294967295
     b0c:	4770      	bx	lr

00000b0e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     b12:	604b      	str	r3, [r1, #4]

	return 0;
}
     b14:	2000      	movs	r0, #0
     b16:	4770      	bx	lr

00000b18 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     b18:	2001      	movs	r0, #1
     b1a:	4770      	bx	lr

00000b1c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     b1c:	2000      	movs	r0, #0
     b1e:	4770      	bx	lr

00000b20 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b20:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     b22:	4a09      	ldr	r2, [pc, #36]	; (b48 <_init_chip+0x28>)
     b24:	8813      	ldrh	r3, [r2, #0]
     b26:	b29b      	uxth	r3, r3
     b28:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     b2a:	4b08      	ldr	r3, [pc, #32]	; (b4c <_init_chip+0x2c>)
     b2c:	4798      	blx	r3
	_oscctrl_init_sources();
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <_init_chip+0x30>)
     b30:	4798      	blx	r3
	_mclk_init();
     b32:	4b08      	ldr	r3, [pc, #32]	; (b54 <_init_chip+0x34>)
     b34:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     b36:	2008      	movs	r0, #8
     b38:	4c07      	ldr	r4, [pc, #28]	; (b58 <_init_chip+0x38>)
     b3a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <_init_chip+0x3c>)
     b3e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b40:	f640 70f7 	movw	r0, #4087	; 0xff7
     b44:	47a0      	blx	r4
     b46:	bd10      	pop	{r4, pc}
     b48:	41004000 	.word	0x41004000
     b4c:	00000d51 	.word	0x00000d51
     b50:	00000d65 	.word	0x00000d65
     b54:	00000d45 	.word	0x00000d45
     b58:	00000d05 	.word	0x00000d05
     b5c:	00000d69 	.word	0x00000d69

00000b60 <_dmac_handler>:

	return ERR_NONE;
}

static void _dmac_handler(void)
{
     b60:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
     b62:	4a17      	ldr	r2, [pc, #92]	; (bc0 <_dmac_handler+0x60>)
     b64:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     b66:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     b6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     b6e:	0088      	lsls	r0, r1, #2
     b70:	4914      	ldr	r1, [pc, #80]	; (bc4 <_dmac_handler+0x64>)
     b72:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
     b74:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     b76:	f412 7f80 	tst.w	r2, #256	; 0x100
     b7a:	d105      	bne.n	b88 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     b7c:	4a10      	ldr	r2, [pc, #64]	; (bc0 <_dmac_handler+0x60>)
     b7e:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     b80:	f412 7f00 	tst.w	r2, #512	; 0x200
     b84:	d10b      	bne.n	b9e <_dmac_handler+0x3e>
     b86:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     b88:	011a      	lsls	r2, r3, #4
     b8a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     b8e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     b92:	2101      	movs	r1, #1
     b94:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     b98:	6843      	ldr	r3, [r0, #4]
     b9a:	4798      	blx	r3
     b9c:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     b9e:	011a      	lsls	r2, r3, #4
     ba0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ba4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     ba8:	2102      	movs	r1, #2
     baa:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     bae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bb2:	fa03 f201 	lsl.w	r2, r3, r1
     bb6:	4b03      	ldr	r3, [pc, #12]	; (bc4 <_dmac_handler+0x64>)
     bb8:	589b      	ldr	r3, [r3, r2]
     bba:	4798      	blx	r3
	}
}
     bbc:	e7e3      	b.n	b86 <_dmac_handler+0x26>
     bbe:	bf00      	nop
     bc0:	4100a000 	.word	0x4100a000
     bc4:	200000a4 	.word	0x200000a4

00000bc8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     bc8:	4b02      	ldr	r3, [pc, #8]	; (bd4 <_dma_set_destination_address+0xc>)
     bca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     bce:	6081      	str	r1, [r0, #8]
}
     bd0:	2000      	movs	r0, #0
     bd2:	4770      	bx	lr
     bd4:	20000260 	.word	0x20000260

00000bd8 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     bd8:	4b02      	ldr	r3, [pc, #8]	; (be4 <_dma_set_source_address+0xc>)
     bda:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     bde:	6041      	str	r1, [r0, #4]
}
     be0:	2000      	movs	r0, #0
     be2:	4770      	bx	lr
     be4:	20000260 	.word	0x20000260

00000be8 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     be8:	4a05      	ldr	r2, [pc, #20]	; (c00 <_dma_srcinc_enable+0x18>)
     bea:	0100      	lsls	r0, r0, #4
     bec:	5a13      	ldrh	r3, [r2, r0]
     bee:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
     bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
     bf4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
     bf8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     bfa:	5211      	strh	r1, [r2, r0]
}
     bfc:	2000      	movs	r0, #0
     bfe:	4770      	bx	lr
     c00:	20000260 	.word	0x20000260

00000c04 <_dma_set_data_amount>:
{
     c04:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     c06:	4c14      	ldr	r4, [pc, #80]	; (c58 <_dma_set_data_amount+0x54>)
     c08:	0102      	lsls	r2, r0, #4
     c0a:	18a3      	adds	r3, r4, r2
     c0c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     c0e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     c10:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     c14:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     c16:	f412 6f00 	tst.w	r2, #2048	; 0x800
     c1a:	d006      	beq.n	c2a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     c1c:	fa01 f403 	lsl.w	r4, r1, r3
     c20:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     c22:	4a0d      	ldr	r2, [pc, #52]	; (c58 <_dma_set_data_amount+0x54>)
     c24:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     c28:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     c2a:	4c0b      	ldr	r4, [pc, #44]	; (c58 <_dma_set_data_amount+0x54>)
     c2c:	0102      	lsls	r2, r0, #4
     c2e:	18a5      	adds	r5, r4, r2
     c30:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     c32:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     c34:	f412 6f80 	tst.w	r2, #1024	; 0x400
     c38:	d005      	beq.n	c46 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     c3a:	fa01 f303 	lsl.w	r3, r1, r3
     c3e:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     c40:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     c44:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     c46:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <_dma_set_data_amount+0x54>)
     c4a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     c4e:	8041      	strh	r1, [r0, #2]
}
     c50:	2000      	movs	r0, #0
     c52:	bc30      	pop	{r4, r5}
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	20000260 	.word	0x20000260

00000c5c <_dma_enable_transaction>:
{
     c5c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     c5e:	4c0c      	ldr	r4, [pc, #48]	; (c90 <_dma_enable_transaction+0x34>)
     c60:	0102      	lsls	r2, r0, #4
     c62:	5aa3      	ldrh	r3, [r4, r2]
     c64:	b29b      	uxth	r3, r3
     c66:	f043 0301 	orr.w	r3, r3, #1
     c6a:	52a3      	strh	r3, [r4, r2]
}

static inline void hri_dmac_set_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     c6c:	4c09      	ldr	r4, [pc, #36]	; (c94 <_dma_enable_transaction+0x38>)
     c6e:	1d03      	adds	r3, r0, #4
     c70:	011b      	lsls	r3, r3, #4
     c72:	58e2      	ldr	r2, [r4, r3]
     c74:	f042 0202 	orr.w	r2, r2, #2
     c78:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
     c7a:	b129      	cbz	r1, c88 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
     c7c:	2301      	movs	r3, #1
     c7e:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
     c82:	6922      	ldr	r2, [r4, #16]
     c84:	4310      	orrs	r0, r2
     c86:	6120      	str	r0, [r4, #16]
}
     c88:	2000      	movs	r0, #0
     c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
     c8e:	4770      	bx	lr
     c90:	20000260 	.word	0x20000260
     c94:	4100a000 	.word	0x4100a000

00000c98 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
     c98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     c9c:	008a      	lsls	r2, r1, #2
     c9e:	4b02      	ldr	r3, [pc, #8]	; (ca8 <_dma_get_channel_resource+0x10>)
     ca0:	4413      	add	r3, r2
     ca2:	6003      	str	r3, [r0, #0]
}
     ca4:	2000      	movs	r0, #0
     ca6:	4770      	bx	lr
     ca8:	200000a4 	.word	0x200000a4

00000cac <_dma_dstinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     cac:	4a05      	ldr	r2, [pc, #20]	; (cc4 <_dma_dstinc_enable+0x18>)
     cae:	0100      	lsls	r0, r0, #4
     cb0:	5a13      	ldrh	r3, [r2, r0]
     cb2:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_DSTINC;
     cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
     cb8:	ea43 21c1 	orr.w	r1, r3, r1, lsl #11
     cbc:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
     cbe:	5211      	strh	r1, [r2, r0]
}
     cc0:	2000      	movs	r0, #0
     cc2:	4770      	bx	lr
     cc4:	20000260 	.word	0x20000260

00000cc8 <DMAC_0_Handler>:

void DMAC_0_Handler(void)
{
     cc8:	b508      	push	{r3, lr}
	_dmac_handler();
     cca:	4b01      	ldr	r3, [pc, #4]	; (cd0 <DMAC_0_Handler+0x8>)
     ccc:	4798      	blx	r3
     cce:	bd08      	pop	{r3, pc}
     cd0:	00000b61 	.word	0x00000b61

00000cd4 <DMAC_1_Handler>:
}

void DMAC_1_Handler(void)
{
     cd4:	b508      	push	{r3, lr}
	_dmac_handler();
     cd6:	4b01      	ldr	r3, [pc, #4]	; (cdc <DMAC_1_Handler+0x8>)
     cd8:	4798      	blx	r3
     cda:	bd08      	pop	{r3, pc}
     cdc:	00000b61 	.word	0x00000b61

00000ce0 <DMAC_2_Handler>:
}

void DMAC_2_Handler(void)
{
     ce0:	b508      	push	{r3, lr}
	_dmac_handler();
     ce2:	4b01      	ldr	r3, [pc, #4]	; (ce8 <DMAC_2_Handler+0x8>)
     ce4:	4798      	blx	r3
     ce6:	bd08      	pop	{r3, pc}
     ce8:	00000b61 	.word	0x00000b61

00000cec <DMAC_3_Handler>:
}

void DMAC_3_Handler(void)
{
     cec:	b508      	push	{r3, lr}
	_dmac_handler();
     cee:	4b01      	ldr	r3, [pc, #4]	; (cf4 <DMAC_3_Handler+0x8>)
     cf0:	4798      	blx	r3
     cf2:	bd08      	pop	{r3, pc}
     cf4:	00000b61 	.word	0x00000b61

00000cf8 <DMAC_4_Handler>:
}

void DMAC_4_Handler(void)
{
     cf8:	b508      	push	{r3, lr}
	_dmac_handler();
     cfa:	4b01      	ldr	r3, [pc, #4]	; (d00 <DMAC_4_Handler+0x8>)
     cfc:	4798      	blx	r3
     cfe:	bd08      	pop	{r3, pc}
     d00:	00000b61 	.word	0x00000b61

00000d04 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     d04:	f010 0f01 	tst.w	r0, #1
     d08:	d008      	beq.n	d1c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     d0a:	4a0b      	ldr	r2, [pc, #44]	; (d38 <_gclk_init_generators_by_fref+0x34>)
     d0c:	4b0b      	ldr	r3, [pc, #44]	; (d3c <_gclk_init_generators_by_fref+0x38>)
     d0e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     d10:	4b0a      	ldr	r3, [pc, #40]	; (d3c <_gclk_init_generators_by_fref+0x38>)
     d12:	685a      	ldr	r2, [r3, #4]
     d14:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     d18:	421a      	tst	r2, r3
     d1a:	d1f9      	bne.n	d10 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     d1c:	f010 0f08 	tst.w	r0, #8
     d20:	d008      	beq.n	d34 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     d22:	4a07      	ldr	r2, [pc, #28]	; (d40 <_gclk_init_generators_by_fref+0x3c>)
     d24:	4b05      	ldr	r3, [pc, #20]	; (d3c <_gclk_init_generators_by_fref+0x38>)
     d26:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     d28:	4b04      	ldr	r3, [pc, #16]	; (d3c <_gclk_init_generators_by_fref+0x38>)
     d2a:	685a      	ldr	r2, [r3, #4]
     d2c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     d30:	421a      	tst	r2, r3
     d32:	d1f9      	bne.n	d28 <_gclk_init_generators_by_fref+0x24>
     d34:	4770      	bx	lr
     d36:	bf00      	nop
     d38:	00010106 	.word	0x00010106
     d3c:	40001c00 	.word	0x40001c00
     d40:	00010104 	.word	0x00010104

00000d44 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     d44:	2201      	movs	r2, #1
     d46:	4b01      	ldr	r3, [pc, #4]	; (d4c <_mclk_init+0x8>)
     d48:	715a      	strb	r2, [r3, #5]
     d4a:	4770      	bx	lr
     d4c:	40000800 	.word	0x40000800

00000d50 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     d50:	4b03      	ldr	r3, [pc, #12]	; (d60 <_osc32kctrl_init_sources+0x10>)
     d52:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     d54:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     d58:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     d5a:	2201      	movs	r2, #1
     d5c:	741a      	strb	r2, [r3, #16]
     d5e:	4770      	bx	lr
     d60:	40001400 	.word	0x40001400

00000d64 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     d64:	4770      	bx	lr
	...

00000d68 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     d68:	4a36      	ldr	r2, [pc, #216]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     d6a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     d6c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     d70:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     d74:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     d76:	4b33      	ldr	r3, [pc, #204]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     d78:	685a      	ldr	r2, [r3, #4]
     d7a:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     d7e:	421a      	tst	r2, r3
     d80:	d1f9      	bne.n	d76 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     d82:	4b30      	ldr	r3, [pc, #192]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     d84:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     d86:	f013 0f04 	tst.w	r3, #4
     d8a:	d1fa      	bne.n	d82 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     d8c:	4b2e      	ldr	r3, [pc, #184]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     d8e:	2200      	movs	r2, #0
     d90:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     d92:	4a2e      	ldr	r2, [pc, #184]	; (e4c <_oscctrl_init_referenced_generators+0xe4>)
     d94:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     d96:	4b2c      	ldr	r3, [pc, #176]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     d98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     d9c:	f013 0f10 	tst.w	r3, #16
     da0:	d1f9      	bne.n	d96 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     da2:	2200      	movs	r2, #0
     da4:	4b28      	ldr	r3, [pc, #160]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     da6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     daa:	4b27      	ldr	r3, [pc, #156]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     db0:	f013 0f04 	tst.w	r3, #4
     db4:	d1f9      	bne.n	daa <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     db6:	2202      	movs	r2, #2
     db8:	4b23      	ldr	r3, [pc, #140]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     dbc:	4b22      	ldr	r3, [pc, #136]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     dc2:	f013 0f02 	tst.w	r3, #2
     dc6:	d1f9      	bne.n	dbc <_oscctrl_init_referenced_generators+0x54>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     dc8:	4b1f      	ldr	r3, [pc, #124]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     dcc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     dce:	4b1e      	ldr	r3, [pc, #120]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     dd4:	f013 0f08 	tst.w	r3, #8
     dd8:	d1f9      	bne.n	dce <_oscctrl_init_referenced_generators+0x66>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	4b1a      	ldr	r3, [pc, #104]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dde:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     de2:	4b19      	ldr	r3, [pc, #100]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     de4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     de8:	f013 0f04 	tst.w	r3, #4
     dec:	d1f9      	bne.n	de2 <_oscctrl_init_referenced_generators+0x7a>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     dee:	4b16      	ldr	r3, [pc, #88]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     df0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     df4:	f013 0f01 	tst.w	r3, #1
     df8:	d01d      	beq.n	e36 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     dfa:	4b13      	ldr	r3, [pc, #76]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     dfc:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
     dfe:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     e02:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     e06:	d1f8      	bne.n	dfa <_oscctrl_init_referenced_generators+0x92>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     e08:	4b0e      	ldr	r3, [pc, #56]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     e0a:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     e0c:	2b00      	cmp	r3, #0
     e0e:	d1fb      	bne.n	e08 <_oscctrl_init_referenced_generators+0xa0>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     e10:	4a0c      	ldr	r2, [pc, #48]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     e12:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     e14:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     e18:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     e1c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e1e:	4b09      	ldr	r3, [pc, #36]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     e20:	685a      	ldr	r2, [r3, #4]
     e22:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     e26:	421a      	tst	r2, r3
     e28:	d1f9      	bne.n	e1e <_oscctrl_init_referenced_generators+0xb6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     e2a:	4b06      	ldr	r3, [pc, #24]	; (e44 <_oscctrl_init_referenced_generators+0xdc>)
     e2c:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     e2e:	f013 0f04 	tst.w	r3, #4
     e32:	d1fa      	bne.n	e2a <_oscctrl_init_referenced_generators+0xc2>
		;
#endif
	(void)hw;
}
     e34:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <_oscctrl_init_referenced_generators+0xe0>)
     e38:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
     e3e:	d0fa      	beq.n	e36 <_oscctrl_init_referenced_generators+0xce>
     e40:	e7e2      	b.n	e08 <_oscctrl_init_referenced_generators+0xa0>
     e42:	bf00      	nop
     e44:	40001c00 	.word	0x40001c00
     e48:	40001000 	.word	0x40001000
     e4c:	04010000 	.word	0x04010000

00000e50 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     e50:	b500      	push	{lr}
     e52:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     e54:	4b0d      	ldr	r3, [pc, #52]	; (e8c <RAMECC_Handler+0x3c>)
     e56:	789b      	ldrb	r3, [r3, #2]
     e58:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     e5a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     e5c:	9b01      	ldr	r3, [sp, #4]
     e5e:	f013 0f02 	tst.w	r3, #2
     e62:	d006      	beq.n	e72 <RAMECC_Handler+0x22>
     e64:	4b0a      	ldr	r3, [pc, #40]	; (e90 <RAMECC_Handler+0x40>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	b11b      	cbz	r3, e72 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     e6a:	4a08      	ldr	r2, [pc, #32]	; (e8c <RAMECC_Handler+0x3c>)
     e6c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     e6e:	4798      	blx	r3
     e70:	e009      	b.n	e86 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     e72:	9b01      	ldr	r3, [sp, #4]
     e74:	f013 0f01 	tst.w	r3, #1
     e78:	d005      	beq.n	e86 <RAMECC_Handler+0x36>
     e7a:	4b05      	ldr	r3, [pc, #20]	; (e90 <RAMECC_Handler+0x40>)
     e7c:	685b      	ldr	r3, [r3, #4]
     e7e:	b113      	cbz	r3, e86 <RAMECC_Handler+0x36>
     e80:	4a02      	ldr	r2, [pc, #8]	; (e8c <RAMECC_Handler+0x3c>)
     e82:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     e84:	4798      	blx	r3
	} else {
		return;
	}
}
     e86:	b003      	add	sp, #12
     e88:	f85d fb04 	ldr.w	pc, [sp], #4
     e8c:	41020000 	.word	0x41020000
     e90:	20000660 	.word	0x20000660

00000e94 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     e94:	b470      	push	{r4, r5, r6}
     e96:	b089      	sub	sp, #36	; 0x24
     e98:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     e9a:	466c      	mov	r4, sp
     e9c:	4d0c      	ldr	r5, [pc, #48]	; (ed0 <_sercom_get_hardware_index+0x3c>)
     e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     ea2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eaa:	2000      	movs	r0, #0
     eac:	2807      	cmp	r0, #7
     eae:	d80a      	bhi.n	ec6 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     eb0:	ab08      	add	r3, sp, #32
     eb2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     eb6:	f853 3c20 	ldr.w	r3, [r3, #-32]
     eba:	42b3      	cmp	r3, r6
     ebc:	d001      	beq.n	ec2 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ebe:	3001      	adds	r0, #1
     ec0:	e7f4      	b.n	eac <_sercom_get_hardware_index+0x18>
			return i;
     ec2:	b2c0      	uxtb	r0, r0
     ec4:	e000      	b.n	ec8 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     ec6:	2000      	movs	r0, #0
}
     ec8:	b009      	add	sp, #36	; 0x24
     eca:	bc70      	pop	{r4, r5, r6}
     ecc:	4770      	bx	lr
     ece:	bf00      	nop
     ed0:	00002918 	.word	0x00002918

00000ed4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     ed4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     ed6:	4b0d      	ldr	r3, [pc, #52]	; (f0c <_get_sercom_index+0x38>)
     ed8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     eda:	2300      	movs	r3, #0
     edc:	2b01      	cmp	r3, #1
     ede:	d80b      	bhi.n	ef8 <_get_sercom_index+0x24>
		if (_usarts[i].number == sercom_offset) {
     ee0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     ee4:	00d1      	lsls	r1, r2, #3
     ee6:	4a0a      	ldr	r2, [pc, #40]	; (f10 <_get_sercom_index+0x3c>)
     ee8:	440a      	add	r2, r1
     eea:	f892 2020 	ldrb.w	r2, [r2, #32]
     eee:	4290      	cmp	r0, r2
     ef0:	d009      	beq.n	f06 <_get_sercom_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     ef2:	3301      	adds	r3, #1
     ef4:	b2db      	uxtb	r3, r3
     ef6:	e7f1      	b.n	edc <_get_sercom_index+0x8>
			return i;
		}
	}

	ASSERT(false);
     ef8:	f240 2247 	movw	r2, #583	; 0x247
     efc:	4905      	ldr	r1, [pc, #20]	; (f14 <_get_sercom_index+0x40>)
     efe:	2000      	movs	r0, #0
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <_get_sercom_index+0x44>)
     f02:	4798      	blx	r3
	return 0;
     f04:	2300      	movs	r3, #0
}
     f06:	4618      	mov	r0, r3
     f08:	bd08      	pop	{r3, pc}
     f0a:	bf00      	nop
     f0c:	00000e95 	.word	0x00000e95
     f10:	00002918 	.word	0x00002918
     f14:	000029a4 	.word	0x000029a4
     f18:	00000add 	.word	0x00000add

00000f1c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     f1c:	b538      	push	{r3, r4, r5, lr}
     f1e:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     f20:	4b3c      	ldr	r3, [pc, #240]	; (1014 <_usart_init+0xf8>)
     f22:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     f24:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     f26:	f013 0f01 	tst.w	r3, #1
     f2a:	d122      	bne.n	f72 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     f2c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     f30:	00da      	lsls	r2, r3, #3
     f32:	4b39      	ldr	r3, [pc, #228]	; (1018 <_usart_init+0xfc>)
     f34:	4413      	add	r3, r2
     f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     f38:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f3c:	69e3      	ldr	r3, [r4, #28]
     f3e:	f013 0f03 	tst.w	r3, #3
     f42:	d1fb      	bne.n	f3c <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     f44:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     f46:	f013 0f02 	tst.w	r3, #2
     f4a:	d00b      	beq.n	f64 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     f4c:	6823      	ldr	r3, [r4, #0]
     f4e:	f023 0302 	bic.w	r3, r3, #2
     f52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f54:	69e3      	ldr	r3, [r4, #28]
     f56:	f013 0f03 	tst.w	r3, #3
     f5a:	d1fb      	bne.n	f54 <_usart_init+0x38>
     f5c:	69e3      	ldr	r3, [r4, #28]
     f5e:	f013 0f02 	tst.w	r3, #2
     f62:	d1fb      	bne.n	f5c <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     f64:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f6a:	69e3      	ldr	r3, [r4, #28]
     f6c:	f013 0f03 	tst.w	r3, #3
     f70:	d1fb      	bne.n	f6a <_usart_init+0x4e>
     f72:	69e3      	ldr	r3, [r4, #28]
     f74:	f013 0f01 	tst.w	r3, #1
     f78:	d1fb      	bne.n	f72 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     f7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     f7e:	00da      	lsls	r2, r3, #3
     f80:	4b25      	ldr	r3, [pc, #148]	; (1018 <_usart_init+0xfc>)
     f82:	4413      	add	r3, r2
     f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f86:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f88:	69e3      	ldr	r3, [r4, #28]
     f8a:	f013 0f03 	tst.w	r3, #3
     f8e:	d1fb      	bne.n	f88 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     f90:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     f94:	00da      	lsls	r2, r3, #3
     f96:	4b20      	ldr	r3, [pc, #128]	; (1018 <_usart_init+0xfc>)
     f98:	4413      	add	r3, r2
     f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     f9c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f9e:	69e3      	ldr	r3, [r4, #28]
     fa0:	f013 0f1f 	tst.w	r3, #31
     fa4:	d1fb      	bne.n	f9e <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     fa6:	0042      	lsls	r2, r0, #1
     fa8:	4402      	add	r2, r0
     faa:	00d1      	lsls	r1, r2, #3
     fac:	4b1a      	ldr	r3, [pc, #104]	; (1018 <_usart_init+0xfc>)
     fae:	440b      	add	r3, r1
     fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     fb2:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fba:	d10a      	bne.n	fd2 <_usart_init+0xb6>
     fbc:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     fc0:	d107      	bne.n	fd2 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     fc2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     fc6:	00da      	lsls	r2, r3, #3
     fc8:	4b13      	ldr	r3, [pc, #76]	; (1018 <_usart_init+0xfc>)
     fca:	4413      	add	r3, r2
     fcc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     fce:	81a3      	strh	r3, [r4, #12]
     fd0:	e00f      	b.n	ff2 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     fd2:	0042      	lsls	r2, r0, #1
     fd4:	4402      	add	r2, r0
     fd6:	00d1      	lsls	r1, r2, #3
     fd8:	4b0f      	ldr	r3, [pc, #60]	; (1018 <_usart_init+0xfc>)
     fda:	440b      	add	r3, r1
     fdc:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     fde:	89a2      	ldrh	r2, [r4, #12]
     fe0:	f361 020c 	bfi	r2, r1, #0, #13
     fe4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     fe6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     fea:	89a3      	ldrh	r3, [r4, #12]
     fec:	f362 334f 	bfi	r3, r2, #13, #3
     ff0:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     ff2:	4a09      	ldr	r2, [pc, #36]	; (1018 <_usart_init+0xfc>)
     ff4:	0043      	lsls	r3, r0, #1
     ff6:	181d      	adds	r5, r3, r0
     ff8:	00e9      	lsls	r1, r5, #3
     ffa:	460d      	mov	r5, r1
     ffc:	4411      	add	r1, r2
     ffe:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1002:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1004:	442a      	add	r2, r5
    1006:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    100a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    100e:	2000      	movs	r0, #0
    1010:	bd38      	pop	{r3, r4, r5, pc}
    1012:	bf00      	nop
    1014:	00000ed5 	.word	0x00000ed5
    1018:	00002918 	.word	0x00002918

0000101c <_usart_sync_init>:
{
    101c:	b538      	push	{r3, r4, r5, lr}
    101e:	460c      	mov	r4, r1
	ASSERT(device);
    1020:	4605      	mov	r5, r0
    1022:	22bb      	movs	r2, #187	; 0xbb
    1024:	4905      	ldr	r1, [pc, #20]	; (103c <_usart_sync_init+0x20>)
    1026:	3000      	adds	r0, #0
    1028:	bf18      	it	ne
    102a:	2001      	movne	r0, #1
    102c:	4b04      	ldr	r3, [pc, #16]	; (1040 <_usart_sync_init+0x24>)
    102e:	4798      	blx	r3
	device->hw = hw;
    1030:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1032:	4620      	mov	r0, r4
    1034:	4b03      	ldr	r3, [pc, #12]	; (1044 <_usart_sync_init+0x28>)
    1036:	4798      	blx	r3
}
    1038:	bd38      	pop	{r3, r4, r5, pc}
    103a:	bf00      	nop
    103c:	000029a4 	.word	0x000029a4
    1040:	00000add 	.word	0x00000add
    1044:	00000f1d 	.word	0x00000f1d

00001048 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1048:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    104a:	6813      	ldr	r3, [r2, #0]
    104c:	f043 0302 	orr.w	r3, r3, #2
    1050:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1052:	69d3      	ldr	r3, [r2, #28]
    1054:	f013 0f03 	tst.w	r3, #3
    1058:	d1fb      	bne.n	1052 <_usart_sync_enable+0xa>
}
    105a:	4770      	bx	lr

0000105c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    105c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    105e:	6299      	str	r1, [r3, #40]	; 0x28
    1060:	4770      	bx	lr

00001062 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1062:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1064:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1066:	b2c0      	uxtb	r0, r0
    1068:	4770      	bx	lr

0000106a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    106a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    106c:	7e18      	ldrb	r0, [r3, #24]
}
    106e:	f000 0001 	and.w	r0, r0, #1
    1072:	4770      	bx	lr

00001074 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1074:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1076:	7e18      	ldrb	r0, [r3, #24]
}
    1078:	f3c0 0040 	ubfx	r0, r0, #1, #1
    107c:	4770      	bx	lr

0000107e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    107e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1080:	7e18      	ldrb	r0, [r3, #24]
}
    1082:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1086:	4770      	bx	lr

00001088 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	4606      	mov	r6, r0
    108c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    108e:	4608      	mov	r0, r1
    1090:	4b58      	ldr	r3, [pc, #352]	; (11f4 <_spi_m_sync_init+0x16c>)
    1092:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1094:	2300      	movs	r3, #0
    1096:	2b00      	cmp	r3, #0
    1098:	d068      	beq.n	116c <_spi_m_sync_init+0xe4>
	return NULL;
    109a:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    109c:	2e00      	cmp	r6, #0
    109e:	d071      	beq.n	1184 <_spi_m_sync_init+0xfc>
    10a0:	2c00      	cmp	r4, #0
    10a2:	d06d      	beq.n	1180 <_spi_m_sync_init+0xf8>
    10a4:	2001      	movs	r0, #1
    10a6:	f640 123f 	movw	r2, #2367	; 0x93f
    10aa:	4953      	ldr	r1, [pc, #332]	; (11f8 <_spi_m_sync_init+0x170>)
    10ac:	4b53      	ldr	r3, [pc, #332]	; (11fc <_spi_m_sync_init+0x174>)
    10ae:	4798      	blx	r3

	if (regs == NULL) {
    10b0:	2d00      	cmp	r5, #0
    10b2:	f000 809c 	beq.w	11ee <_spi_m_sync_init+0x166>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    10b6:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    10b8:	f013 0f01 	tst.w	r3, #1
    10bc:	d11d      	bne.n	10fa <_spi_m_sync_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    10be:	682b      	ldr	r3, [r5, #0]
    10c0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10c4:	69e3      	ldr	r3, [r4, #28]
    10c6:	f013 0f03 	tst.w	r3, #3
    10ca:	d1fb      	bne.n	10c4 <_spi_m_sync_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    10cc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    10ce:	f013 0f02 	tst.w	r3, #2
    10d2:	d00b      	beq.n	10ec <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    10d4:	6823      	ldr	r3, [r4, #0]
    10d6:	f023 0302 	bic.w	r3, r3, #2
    10da:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10dc:	69e3      	ldr	r3, [r4, #28]
    10de:	f013 0f03 	tst.w	r3, #3
    10e2:	d1fb      	bne.n	10dc <_spi_m_sync_init+0x54>
    10e4:	69e3      	ldr	r3, [r4, #28]
    10e6:	f013 0f02 	tst.w	r3, #2
    10ea:	d1fb      	bne.n	10e4 <_spi_m_sync_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    10ec:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    10f0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10f2:	69e3      	ldr	r3, [r4, #28]
    10f4:	f013 0f03 	tst.w	r3, #3
    10f8:	d1fb      	bne.n	10f2 <_spi_m_sync_init+0x6a>
    10fa:	69e3      	ldr	r3, [r4, #28]
    10fc:	f013 0f01 	tst.w	r3, #1
    1100:	d1fb      	bne.n	10fa <_spi_m_sync_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1102:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1104:	682b      	ldr	r3, [r5, #0]
    1106:	f003 031c 	and.w	r3, r3, #28
    110a:	2b08      	cmp	r3, #8
    110c:	d03c      	beq.n	1188 <_spi_m_sync_init+0x100>
	ASSERT(hw && regs);
    110e:	2c00      	cmp	r4, #0
    1110:	d069      	beq.n	11e6 <_spi_m_sync_init+0x15e>
    1112:	2d00      	cmp	r5, #0
    1114:	d065      	beq.n	11e2 <_spi_m_sync_init+0x15a>
    1116:	2001      	movs	r0, #1
    1118:	f640 1209 	movw	r2, #2313	; 0x909
    111c:	4936      	ldr	r1, [pc, #216]	; (11f8 <_spi_m_sync_init+0x170>)
    111e:	4b37      	ldr	r3, [pc, #220]	; (11fc <_spi_m_sync_init+0x174>)
    1120:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1122:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1128:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    112c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    112e:	69e3      	ldr	r3, [r4, #28]
    1130:	f013 0f03 	tst.w	r3, #3
    1134:	d1fb      	bne.n	112e <_spi_m_sync_init+0xa6>
	    (regs->ctrlb
    1136:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1138:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    113c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1144:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1146:	69e3      	ldr	r3, [r4, #28]
    1148:	f013 0f17 	tst.w	r3, #23
    114c:	d1fb      	bne.n	1146 <_spi_m_sync_init+0xbe>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    114e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1150:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1152:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1154:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1158:	686b      	ldr	r3, [r5, #4]
    115a:	f013 0f07 	tst.w	r3, #7
    115e:	d144      	bne.n	11ea <_spi_m_sync_init+0x162>
    1160:	2301      	movs	r3, #1
    1162:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1164:	89eb      	ldrh	r3, [r5, #14]
    1166:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    116c:	2801      	cmp	r0, #1
    116e:	d002      	beq.n	1176 <_spi_m_sync_init+0xee>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1170:	3301      	adds	r3, #1
    1172:	b2db      	uxtb	r3, r3
    1174:	e78f      	b.n	1096 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1176:	eb03 1503 	add.w	r5, r3, r3, lsl #4
    117a:	4b21      	ldr	r3, [pc, #132]	; (1200 <_spi_m_sync_init+0x178>)
    117c:	441d      	add	r5, r3
    117e:	e78d      	b.n	109c <_spi_m_sync_init+0x14>
	ASSERT(dev && hw);
    1180:	2000      	movs	r0, #0
    1182:	e790      	b.n	10a6 <_spi_m_sync_init+0x1e>
    1184:	2000      	movs	r0, #0
    1186:	e78e      	b.n	10a6 <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
    1188:	b34c      	cbz	r4, 11de <_spi_m_sync_init+0x156>
    118a:	b335      	cbz	r5, 11da <_spi_m_sync_init+0x152>
    118c:	2001      	movs	r0, #1
    118e:	f640 121d 	movw	r2, #2333	; 0x91d
    1192:	4919      	ldr	r1, [pc, #100]	; (11f8 <_spi_m_sync_init+0x170>)
    1194:	4b19      	ldr	r3, [pc, #100]	; (11fc <_spi_m_sync_init+0x174>)
    1196:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1198:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    119a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    119e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    11a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11a4:	69e3      	ldr	r3, [r4, #28]
    11a6:	f013 0f03 	tst.w	r3, #3
    11aa:	d1fb      	bne.n	11a4 <_spi_m_sync_init+0x11c>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    11ac:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    11ae:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    11b2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    11b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11ba:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    11be:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11c0:	69e3      	ldr	r3, [r4, #28]
    11c2:	f013 0f17 	tst.w	r3, #23
    11c6:	d1fb      	bne.n	11c0 <_spi_m_sync_init+0x138>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    11c8:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    11ca:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    11cc:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    11ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    11d2:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1fc      	bne.n	11d2 <_spi_m_sync_init+0x14a>
    11d8:	e7be      	b.n	1158 <_spi_m_sync_init+0xd0>
	ASSERT(hw && regs);
    11da:	2000      	movs	r0, #0
    11dc:	e7d7      	b.n	118e <_spi_m_sync_init+0x106>
    11de:	2000      	movs	r0, #0
    11e0:	e7d5      	b.n	118e <_spi_m_sync_init+0x106>
	ASSERT(hw && regs);
    11e2:	2000      	movs	r0, #0
    11e4:	e798      	b.n	1118 <_spi_m_sync_init+0x90>
    11e6:	2000      	movs	r0, #0
    11e8:	e796      	b.n	1118 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    11ea:	2302      	movs	r3, #2
    11ec:	e7b9      	b.n	1162 <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    11ee:	f06f 000c 	mvn.w	r0, #12
}
    11f2:	bd70      	pop	{r4, r5, r6, pc}
    11f4:	00000e95 	.word	0x00000e95
    11f8:	000029a4 	.word	0x000029a4
    11fc:	00000add 	.word	0x00000add
    1200:	00002990 	.word	0x00002990

00001204 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	b087      	sub	sp, #28
    1208:	4607      	mov	r7, r0
    120a:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
    120c:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    120e:	680b      	ldr	r3, [r1, #0]
    1210:	9301      	str	r3, [sp, #4]
    1212:	684b      	ldr	r3, [r1, #4]
    1214:	9302      	str	r3, [sp, #8]
    1216:	2300      	movs	r3, #0
    1218:	9303      	str	r3, [sp, #12]
    121a:	9304      	str	r3, [sp, #16]
    121c:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    121e:	b1b8      	cbz	r0, 1250 <_spi_m_sync_trans+0x4c>
    1220:	b1a4      	cbz	r4, 124c <_spi_m_sync_trans+0x48>
    1222:	2001      	movs	r0, #1
    1224:	f640 22a3 	movw	r2, #2723	; 0xaa3
    1228:	4934      	ldr	r1, [pc, #208]	; (12fc <_spi_m_sync_trans+0xf8>)
    122a:	4b35      	ldr	r3, [pc, #212]	; (1300 <_spi_m_sync_trans+0xfc>)
    122c:	4798      	blx	r3
    122e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1230:	f013 0f07 	tst.w	r3, #7
    1234:	d15f      	bne.n	12f6 <_spi_m_sync_trans+0xf2>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1236:	69e3      	ldr	r3, [r4, #28]
    1238:	f013 0f03 	tst.w	r3, #3
    123c:	d1fb      	bne.n	1236 <_spi_m_sync_trans+0x32>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    123e:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1240:	f013 0f02 	tst.w	r3, #2
    1244:	d11e      	bne.n	1284 <_spi_m_sync_trans+0x80>
		return ERR_NOT_INITIALIZED;
    1246:	f06f 0013 	mvn.w	r0, #19
    124a:	e052      	b.n	12f2 <_spi_m_sync_trans+0xee>
	ASSERT(dev && hw);
    124c:	4618      	mov	r0, r3
    124e:	e7e9      	b.n	1224 <_spi_m_sync_trans+0x20>
    1250:	2000      	movs	r0, #0
    1252:	e7e7      	b.n	1224 <_spi_m_sync_trans+0x20>
		return false;
    1254:	2200      	movs	r2, #0
    1256:	e02b      	b.n	12b0 <_spi_m_sync_trans+0xac>
			data |= (*ctrl->txbuf) << 8;
    1258:	f891 e001 	ldrb.w	lr, [r1, #1]
    125c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			ctrl->txbuf++;
    1260:	3102      	adds	r1, #2
    1262:	9101      	str	r1, [sp, #4]
	ctrl->txcnt++;
    1264:	3201      	adds	r2, #1
    1266:	9203      	str	r2, [sp, #12]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1268:	62a0      	str	r0, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    126a:	f013 0f80 	tst.w	r3, #128	; 0x80
    126e:	d132      	bne.n	12d6 <_spi_m_sync_trans+0xd2>
	return ERR_NONE;
    1270:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1272:	2800      	cmp	r0, #0
    1274:	db37      	blt.n	12e6 <_spi_m_sync_trans+0xe2>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1276:	9803      	ldr	r0, [sp, #12]
    1278:	68ab      	ldr	r3, [r5, #8]
    127a:	4298      	cmp	r0, r3
    127c:	d302      	bcc.n	1284 <_spi_m_sync_trans+0x80>
    127e:	9a04      	ldr	r2, [sp, #16]
    1280:	4293      	cmp	r3, r2
    1282:	d930      	bls.n	12e6 <_spi_m_sync_trans+0xe2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1284:	7e23      	ldrb	r3, [r4, #24]
    1286:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1288:	f013 0f04 	tst.w	r3, #4
    128c:	d0e2      	beq.n	1254 <_spi_m_sync_trans+0x50>
	return ((Sercom *)hw)->SPI.DATA.reg;
    128e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1290:	9a02      	ldr	r2, [sp, #8]
    1292:	b14a      	cbz	r2, 12a8 <_spi_m_sync_trans+0xa4>
		*ctrl->rxbuf++ = (uint8_t)data;
    1294:	1c50      	adds	r0, r2, #1
    1296:	9002      	str	r0, [sp, #8]
    1298:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    129a:	2e01      	cmp	r6, #1
    129c:	d904      	bls.n	12a8 <_spi_m_sync_trans+0xa4>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    129e:	1c90      	adds	r0, r2, #2
    12a0:	9002      	str	r0, [sp, #8]
    12a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    12a6:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    12a8:	9a04      	ldr	r2, [sp, #16]
    12aa:	3201      	adds	r2, #1
    12ac:	9204      	str	r2, [sp, #16]
	return true;
    12ae:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    12b0:	2a00      	cmp	r2, #0
    12b2:	d1da      	bne.n	126a <_spi_m_sync_trans+0x66>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    12b4:	9a03      	ldr	r2, [sp, #12]
    12b6:	9904      	ldr	r1, [sp, #16]
    12b8:	4291      	cmp	r1, r2
    12ba:	d3d6      	bcc.n	126a <_spi_m_sync_trans+0x66>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    12bc:	88f8      	ldrh	r0, [r7, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    12be:	f013 0f01 	tst.w	r3, #1
    12c2:	d0d2      	beq.n	126a <_spi_m_sync_trans+0x66>
	if (ctrl->txbuf) {
    12c4:	9901      	ldr	r1, [sp, #4]
    12c6:	2900      	cmp	r1, #0
    12c8:	d0cc      	beq.n	1264 <_spi_m_sync_trans+0x60>
		data = *ctrl->txbuf++;
    12ca:	1c48      	adds	r0, r1, #1
    12cc:	9001      	str	r0, [sp, #4]
    12ce:	7808      	ldrb	r0, [r1, #0]
		if (ctrl->char_size > 1) {
    12d0:	2e01      	cmp	r6, #1
    12d2:	d8c1      	bhi.n	1258 <_spi_m_sync_trans+0x54>
    12d4:	e7c6      	b.n	1264 <_spi_m_sync_trans+0x60>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    12d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12da:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12dc:	2380      	movs	r3, #128	; 0x80
    12de:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    12e0:	f06f 0012 	mvn.w	r0, #18
    12e4:	e7c5      	b.n	1272 <_spi_m_sync_trans+0x6e>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    12e6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    12e8:	f013 0f03 	tst.w	r3, #3
    12ec:	d0fb      	beq.n	12e6 <_spi_m_sync_trans+0xe2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12ee:	2303      	movs	r3, #3
    12f0:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    12f2:	b007      	add	sp, #28
    12f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    12f6:	f06f 0003 	mvn.w	r0, #3
    12fa:	e7fa      	b.n	12f2 <_spi_m_sync_trans+0xee>
    12fc:	000029a4 	.word	0x000029a4
    1300:	00000add 	.word	0x00000add

00001304 <main>:
#include "atmel_start.h"
#include "atmel_start_pins.h"
#include "driver_examples.h"

int main(void)
{
    1304:	b508      	push	{r3, lr}

  atmel_start_init();
    1306:	4b03      	ldr	r3, [pc, #12]	; (1314 <main+0x10>)
    1308:	4798      	blx	r3

  dma_usart_copy();
    130a:	4b03      	ldr	r3, [pc, #12]	; (1318 <main+0x14>)
    130c:	4798      	blx	r3
  //write_to_usart("hello world!");
  //USART_0_example();
}
    130e:	2000      	movs	r0, #0
    1310:	bd08      	pop	{r3, pc}
    1312:	bf00      	nop
    1314:	000002d1 	.word	0x000002d1
    1318:	0000050d 	.word	0x0000050d

0000131c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    131c:	b958      	cbnz	r0, 1336 <_read+0x1a>
{
    131e:	b508      	push	{r3, lr}
    1320:	460b      	mov	r3, r1
    1322:	4611      	mov	r1, r2
    1324:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <_read+0x20>)
    1328:	4798      	blx	r3
	if (n < 0) {
    132a:	2800      	cmp	r0, #0
    132c:	db00      	blt.n	1330 <_read+0x14>
		return -1;
	}

	return n;
}
    132e:	bd08      	pop	{r3, pc}
		return -1;
    1330:	f04f 30ff 	mov.w	r0, #4294967295
    1334:	bd08      	pop	{r3, pc}
		return -1;
    1336:	f04f 30ff 	mov.w	r0, #4294967295
    133a:	4770      	bx	lr
    133c:	00001395 	.word	0x00001395

00001340 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1340:	3801      	subs	r0, #1
    1342:	2802      	cmp	r0, #2
    1344:	d80b      	bhi.n	135e <_write+0x1e>
{
    1346:	b508      	push	{r3, lr}
    1348:	460b      	mov	r3, r1
    134a:	4611      	mov	r1, r2
    134c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <_write+0x24>)
    1350:	4798      	blx	r3
	if (n < 0) {
    1352:	2800      	cmp	r0, #0
    1354:	db00      	blt.n	1358 <_write+0x18>
		return -1;
	}

	return n;
}
    1356:	bd08      	pop	{r3, pc}
		return -1;
    1358:	f04f 30ff 	mov.w	r0, #4294967295
    135c:	bd08      	pop	{r3, pc}
		return -1;
    135e:	f04f 30ff 	mov.w	r0, #4294967295
    1362:	4770      	bx	lr
    1364:	000013b9 	.word	0x000013b9

00001368 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    136c:	4d06      	ldr	r5, [pc, #24]	; (1388 <stdio_io_init+0x20>)
    136e:	682b      	ldr	r3, [r5, #0]
    1370:	2100      	movs	r1, #0
    1372:	6898      	ldr	r0, [r3, #8]
    1374:	4c05      	ldr	r4, [pc, #20]	; (138c <stdio_io_init+0x24>)
    1376:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1378:	682b      	ldr	r3, [r5, #0]
    137a:	2100      	movs	r1, #0
    137c:	6858      	ldr	r0, [r3, #4]
    137e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1380:	4b03      	ldr	r3, [pc, #12]	; (1390 <stdio_io_init+0x28>)
    1382:	601e      	str	r6, [r3, #0]
    1384:	bd70      	pop	{r4, r5, r6, pc}
    1386:	bf00      	nop
    1388:	20000000 	.word	0x20000000
    138c:	00001619 	.word	0x00001619
    1390:	20000224 	.word	0x20000224

00001394 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1394:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1396:	4b06      	ldr	r3, [pc, #24]	; (13b0 <stdio_io_read+0x1c>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	b133      	cbz	r3, 13aa <stdio_io_read+0x16>
    139c:	460a      	mov	r2, r1
    139e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    13a0:	b292      	uxth	r2, r2
    13a2:	4618      	mov	r0, r3
    13a4:	4b03      	ldr	r3, [pc, #12]	; (13b4 <stdio_io_read+0x20>)
    13a6:	4798      	blx	r3
    13a8:	bd08      	pop	{r3, pc}
		return 0;
    13aa:	2000      	movs	r0, #0
}
    13ac:	bd08      	pop	{r3, pc}
    13ae:	bf00      	nop
    13b0:	20000224 	.word	0x20000224
    13b4:	00000829 	.word	0x00000829

000013b8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    13b8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    13ba:	4b06      	ldr	r3, [pc, #24]	; (13d4 <stdio_io_write+0x1c>)
    13bc:	681b      	ldr	r3, [r3, #0]
    13be:	b133      	cbz	r3, 13ce <stdio_io_write+0x16>
    13c0:	460a      	mov	r2, r1
    13c2:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    13c4:	b292      	uxth	r2, r2
    13c6:	4618      	mov	r0, r3
    13c8:	4b03      	ldr	r3, [pc, #12]	; (13d8 <stdio_io_write+0x20>)
    13ca:	4798      	blx	r3
    13cc:	bd08      	pop	{r3, pc}
		return 0;
    13ce:	2000      	movs	r0, #0
}
    13d0:	bd08      	pop	{r3, pc}
    13d2:	bf00      	nop
    13d4:	20000224 	.word	0x20000224
    13d8:	000007f5 	.word	0x000007f5

000013dc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    13dc:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    13de:	4c04      	ldr	r4, [pc, #16]	; (13f0 <stdio_redirect_init+0x14>)
    13e0:	4620      	mov	r0, r4
    13e2:	4b04      	ldr	r3, [pc, #16]	; (13f4 <stdio_redirect_init+0x18>)
    13e4:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    13e6:	4620      	mov	r0, r4
    13e8:	4b03      	ldr	r3, [pc, #12]	; (13f8 <stdio_redirect_init+0x1c>)
    13ea:	4798      	blx	r3
    13ec:	bd10      	pop	{r4, pc}
    13ee:	bf00      	nop
    13f0:	20000230 	.word	0x20000230
    13f4:	00000a85 	.word	0x00000a85
    13f8:	00001369 	.word	0x00001369

000013fc <__errno>:
    13fc:	4b01      	ldr	r3, [pc, #4]	; (1404 <__errno+0x8>)
    13fe:	6818      	ldr	r0, [r3, #0]
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	20000000 	.word	0x20000000

00001408 <__libc_init_array>:
    1408:	b570      	push	{r4, r5, r6, lr}
    140a:	4e0d      	ldr	r6, [pc, #52]	; (1440 <__libc_init_array+0x38>)
    140c:	4c0d      	ldr	r4, [pc, #52]	; (1444 <__libc_init_array+0x3c>)
    140e:	1ba4      	subs	r4, r4, r6
    1410:	10a4      	asrs	r4, r4, #2
    1412:	2500      	movs	r5, #0
    1414:	42a5      	cmp	r5, r4
    1416:	d109      	bne.n	142c <__libc_init_array+0x24>
    1418:	4e0b      	ldr	r6, [pc, #44]	; (1448 <__libc_init_array+0x40>)
    141a:	4c0c      	ldr	r4, [pc, #48]	; (144c <__libc_init_array+0x44>)
    141c:	f001 fe68 	bl	30f0 <_init>
    1420:	1ba4      	subs	r4, r4, r6
    1422:	10a4      	asrs	r4, r4, #2
    1424:	2500      	movs	r5, #0
    1426:	42a5      	cmp	r5, r4
    1428:	d105      	bne.n	1436 <__libc_init_array+0x2e>
    142a:	bd70      	pop	{r4, r5, r6, pc}
    142c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1430:	4798      	blx	r3
    1432:	3501      	adds	r5, #1
    1434:	e7ee      	b.n	1414 <__libc_init_array+0xc>
    1436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    143a:	4798      	blx	r3
    143c:	3501      	adds	r5, #1
    143e:	e7f2      	b.n	1426 <__libc_init_array+0x1e>
    1440:	000030fc 	.word	0x000030fc
    1444:	000030fc 	.word	0x000030fc
    1448:	000030fc 	.word	0x000030fc
    144c:	00003100 	.word	0x00003100

00001450 <malloc>:
    1450:	4b02      	ldr	r3, [pc, #8]	; (145c <malloc+0xc>)
    1452:	4601      	mov	r1, r0
    1454:	6818      	ldr	r0, [r3, #0]
    1456:	f000 b859 	b.w	150c <_malloc_r>
    145a:	bf00      	nop
    145c:	20000000 	.word	0x20000000

00001460 <memset>:
    1460:	4402      	add	r2, r0
    1462:	4603      	mov	r3, r0
    1464:	4293      	cmp	r3, r2
    1466:	d100      	bne.n	146a <memset+0xa>
    1468:	4770      	bx	lr
    146a:	f803 1b01 	strb.w	r1, [r3], #1
    146e:	e7f9      	b.n	1464 <memset+0x4>

00001470 <_free_r>:
    1470:	b538      	push	{r3, r4, r5, lr}
    1472:	4605      	mov	r5, r0
    1474:	2900      	cmp	r1, #0
    1476:	d045      	beq.n	1504 <_free_r+0x94>
    1478:	f851 3c04 	ldr.w	r3, [r1, #-4]
    147c:	1f0c      	subs	r4, r1, #4
    147e:	2b00      	cmp	r3, #0
    1480:	bfb8      	it	lt
    1482:	18e4      	addlt	r4, r4, r3
    1484:	f000 fe18 	bl	20b8 <__malloc_lock>
    1488:	4a1f      	ldr	r2, [pc, #124]	; (1508 <_free_r+0x98>)
    148a:	6813      	ldr	r3, [r2, #0]
    148c:	4610      	mov	r0, r2
    148e:	b933      	cbnz	r3, 149e <_free_r+0x2e>
    1490:	6063      	str	r3, [r4, #4]
    1492:	6014      	str	r4, [r2, #0]
    1494:	4628      	mov	r0, r5
    1496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    149a:	f000 be0e 	b.w	20ba <__malloc_unlock>
    149e:	42a3      	cmp	r3, r4
    14a0:	d90c      	bls.n	14bc <_free_r+0x4c>
    14a2:	6821      	ldr	r1, [r4, #0]
    14a4:	1862      	adds	r2, r4, r1
    14a6:	4293      	cmp	r3, r2
    14a8:	bf04      	itt	eq
    14aa:	681a      	ldreq	r2, [r3, #0]
    14ac:	685b      	ldreq	r3, [r3, #4]
    14ae:	6063      	str	r3, [r4, #4]
    14b0:	bf04      	itt	eq
    14b2:	1852      	addeq	r2, r2, r1
    14b4:	6022      	streq	r2, [r4, #0]
    14b6:	6004      	str	r4, [r0, #0]
    14b8:	e7ec      	b.n	1494 <_free_r+0x24>
    14ba:	4613      	mov	r3, r2
    14bc:	685a      	ldr	r2, [r3, #4]
    14be:	b10a      	cbz	r2, 14c4 <_free_r+0x54>
    14c0:	42a2      	cmp	r2, r4
    14c2:	d9fa      	bls.n	14ba <_free_r+0x4a>
    14c4:	6819      	ldr	r1, [r3, #0]
    14c6:	1858      	adds	r0, r3, r1
    14c8:	42a0      	cmp	r0, r4
    14ca:	d10b      	bne.n	14e4 <_free_r+0x74>
    14cc:	6820      	ldr	r0, [r4, #0]
    14ce:	4401      	add	r1, r0
    14d0:	1858      	adds	r0, r3, r1
    14d2:	4282      	cmp	r2, r0
    14d4:	6019      	str	r1, [r3, #0]
    14d6:	d1dd      	bne.n	1494 <_free_r+0x24>
    14d8:	6810      	ldr	r0, [r2, #0]
    14da:	6852      	ldr	r2, [r2, #4]
    14dc:	605a      	str	r2, [r3, #4]
    14de:	4401      	add	r1, r0
    14e0:	6019      	str	r1, [r3, #0]
    14e2:	e7d7      	b.n	1494 <_free_r+0x24>
    14e4:	d902      	bls.n	14ec <_free_r+0x7c>
    14e6:	230c      	movs	r3, #12
    14e8:	602b      	str	r3, [r5, #0]
    14ea:	e7d3      	b.n	1494 <_free_r+0x24>
    14ec:	6820      	ldr	r0, [r4, #0]
    14ee:	1821      	adds	r1, r4, r0
    14f0:	428a      	cmp	r2, r1
    14f2:	bf04      	itt	eq
    14f4:	6811      	ldreq	r1, [r2, #0]
    14f6:	6852      	ldreq	r2, [r2, #4]
    14f8:	6062      	str	r2, [r4, #4]
    14fa:	bf04      	itt	eq
    14fc:	1809      	addeq	r1, r1, r0
    14fe:	6021      	streq	r1, [r4, #0]
    1500:	605c      	str	r4, [r3, #4]
    1502:	e7c7      	b.n	1494 <_free_r+0x24>
    1504:	bd38      	pop	{r3, r4, r5, pc}
    1506:	bf00      	nop
    1508:	20000228 	.word	0x20000228

0000150c <_malloc_r>:
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	1ccd      	adds	r5, r1, #3
    1510:	f025 0503 	bic.w	r5, r5, #3
    1514:	3508      	adds	r5, #8
    1516:	2d0c      	cmp	r5, #12
    1518:	bf38      	it	cc
    151a:	250c      	movcc	r5, #12
    151c:	2d00      	cmp	r5, #0
    151e:	4606      	mov	r6, r0
    1520:	db01      	blt.n	1526 <_malloc_r+0x1a>
    1522:	42a9      	cmp	r1, r5
    1524:	d903      	bls.n	152e <_malloc_r+0x22>
    1526:	230c      	movs	r3, #12
    1528:	6033      	str	r3, [r6, #0]
    152a:	2000      	movs	r0, #0
    152c:	bd70      	pop	{r4, r5, r6, pc}
    152e:	f000 fdc3 	bl	20b8 <__malloc_lock>
    1532:	4a23      	ldr	r2, [pc, #140]	; (15c0 <_malloc_r+0xb4>)
    1534:	6814      	ldr	r4, [r2, #0]
    1536:	4621      	mov	r1, r4
    1538:	b991      	cbnz	r1, 1560 <_malloc_r+0x54>
    153a:	4c22      	ldr	r4, [pc, #136]	; (15c4 <_malloc_r+0xb8>)
    153c:	6823      	ldr	r3, [r4, #0]
    153e:	b91b      	cbnz	r3, 1548 <_malloc_r+0x3c>
    1540:	4630      	mov	r0, r6
    1542:	f000 f859 	bl	15f8 <_sbrk_r>
    1546:	6020      	str	r0, [r4, #0]
    1548:	4629      	mov	r1, r5
    154a:	4630      	mov	r0, r6
    154c:	f000 f854 	bl	15f8 <_sbrk_r>
    1550:	1c43      	adds	r3, r0, #1
    1552:	d126      	bne.n	15a2 <_malloc_r+0x96>
    1554:	230c      	movs	r3, #12
    1556:	6033      	str	r3, [r6, #0]
    1558:	4630      	mov	r0, r6
    155a:	f000 fdae 	bl	20ba <__malloc_unlock>
    155e:	e7e4      	b.n	152a <_malloc_r+0x1e>
    1560:	680b      	ldr	r3, [r1, #0]
    1562:	1b5b      	subs	r3, r3, r5
    1564:	d41a      	bmi.n	159c <_malloc_r+0x90>
    1566:	2b0b      	cmp	r3, #11
    1568:	d90f      	bls.n	158a <_malloc_r+0x7e>
    156a:	600b      	str	r3, [r1, #0]
    156c:	50cd      	str	r5, [r1, r3]
    156e:	18cc      	adds	r4, r1, r3
    1570:	4630      	mov	r0, r6
    1572:	f000 fda2 	bl	20ba <__malloc_unlock>
    1576:	f104 000b 	add.w	r0, r4, #11
    157a:	1d23      	adds	r3, r4, #4
    157c:	f020 0007 	bic.w	r0, r0, #7
    1580:	1ac3      	subs	r3, r0, r3
    1582:	d01b      	beq.n	15bc <_malloc_r+0xb0>
    1584:	425a      	negs	r2, r3
    1586:	50e2      	str	r2, [r4, r3]
    1588:	bd70      	pop	{r4, r5, r6, pc}
    158a:	428c      	cmp	r4, r1
    158c:	bf0d      	iteet	eq
    158e:	6863      	ldreq	r3, [r4, #4]
    1590:	684b      	ldrne	r3, [r1, #4]
    1592:	6063      	strne	r3, [r4, #4]
    1594:	6013      	streq	r3, [r2, #0]
    1596:	bf18      	it	ne
    1598:	460c      	movne	r4, r1
    159a:	e7e9      	b.n	1570 <_malloc_r+0x64>
    159c:	460c      	mov	r4, r1
    159e:	6849      	ldr	r1, [r1, #4]
    15a0:	e7ca      	b.n	1538 <_malloc_r+0x2c>
    15a2:	1cc4      	adds	r4, r0, #3
    15a4:	f024 0403 	bic.w	r4, r4, #3
    15a8:	42a0      	cmp	r0, r4
    15aa:	d005      	beq.n	15b8 <_malloc_r+0xac>
    15ac:	1a21      	subs	r1, r4, r0
    15ae:	4630      	mov	r0, r6
    15b0:	f000 f822 	bl	15f8 <_sbrk_r>
    15b4:	3001      	adds	r0, #1
    15b6:	d0cd      	beq.n	1554 <_malloc_r+0x48>
    15b8:	6025      	str	r5, [r4, #0]
    15ba:	e7d9      	b.n	1570 <_malloc_r+0x64>
    15bc:	bd70      	pop	{r4, r5, r6, pc}
    15be:	bf00      	nop
    15c0:	20000228 	.word	0x20000228
    15c4:	2000022c 	.word	0x2000022c

000015c8 <iprintf>:
    15c8:	b40f      	push	{r0, r1, r2, r3}
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <iprintf+0x2c>)
    15cc:	b513      	push	{r0, r1, r4, lr}
    15ce:	681c      	ldr	r4, [r3, #0]
    15d0:	b124      	cbz	r4, 15dc <iprintf+0x14>
    15d2:	69a3      	ldr	r3, [r4, #24]
    15d4:	b913      	cbnz	r3, 15dc <iprintf+0x14>
    15d6:	4620      	mov	r0, r4
    15d8:	f000 fc80 	bl	1edc <__sinit>
    15dc:	ab05      	add	r3, sp, #20
    15de:	9a04      	ldr	r2, [sp, #16]
    15e0:	68a1      	ldr	r1, [r4, #8]
    15e2:	9301      	str	r3, [sp, #4]
    15e4:	4620      	mov	r0, r4
    15e6:	f000 fd91 	bl	210c <_vfiprintf_r>
    15ea:	b002      	add	sp, #8
    15ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15f0:	b004      	add	sp, #16
    15f2:	4770      	bx	lr
    15f4:	20000000 	.word	0x20000000

000015f8 <_sbrk_r>:
    15f8:	b538      	push	{r3, r4, r5, lr}
    15fa:	4c06      	ldr	r4, [pc, #24]	; (1614 <_sbrk_r+0x1c>)
    15fc:	2300      	movs	r3, #0
    15fe:	4605      	mov	r5, r0
    1600:	4608      	mov	r0, r1
    1602:	6023      	str	r3, [r4, #0]
    1604:	f7ff fa6e 	bl	ae4 <_sbrk>
    1608:	1c43      	adds	r3, r0, #1
    160a:	d102      	bne.n	1612 <_sbrk_r+0x1a>
    160c:	6823      	ldr	r3, [r4, #0]
    160e:	b103      	cbz	r3, 1612 <_sbrk_r+0x1a>
    1610:	602b      	str	r3, [r5, #0]
    1612:	bd38      	pop	{r3, r4, r5, pc}
    1614:	20000670 	.word	0x20000670

00001618 <setbuf>:
    1618:	2900      	cmp	r1, #0
    161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    161e:	bf0c      	ite	eq
    1620:	2202      	moveq	r2, #2
    1622:	2200      	movne	r2, #0
    1624:	f000 b800 	b.w	1628 <setvbuf>

00001628 <setvbuf>:
    1628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    162c:	461d      	mov	r5, r3
    162e:	4b51      	ldr	r3, [pc, #324]	; (1774 <setvbuf+0x14c>)
    1630:	681e      	ldr	r6, [r3, #0]
    1632:	4604      	mov	r4, r0
    1634:	460f      	mov	r7, r1
    1636:	4690      	mov	r8, r2
    1638:	b126      	cbz	r6, 1644 <setvbuf+0x1c>
    163a:	69b3      	ldr	r3, [r6, #24]
    163c:	b913      	cbnz	r3, 1644 <setvbuf+0x1c>
    163e:	4630      	mov	r0, r6
    1640:	f000 fc4c 	bl	1edc <__sinit>
    1644:	4b4c      	ldr	r3, [pc, #304]	; (1778 <setvbuf+0x150>)
    1646:	429c      	cmp	r4, r3
    1648:	d152      	bne.n	16f0 <setvbuf+0xc8>
    164a:	6874      	ldr	r4, [r6, #4]
    164c:	f1b8 0f02 	cmp.w	r8, #2
    1650:	d006      	beq.n	1660 <setvbuf+0x38>
    1652:	f1b8 0f01 	cmp.w	r8, #1
    1656:	f200 8089 	bhi.w	176c <setvbuf+0x144>
    165a:	2d00      	cmp	r5, #0
    165c:	f2c0 8086 	blt.w	176c <setvbuf+0x144>
    1660:	4621      	mov	r1, r4
    1662:	4630      	mov	r0, r6
    1664:	f000 fbd0 	bl	1e08 <_fflush_r>
    1668:	6b61      	ldr	r1, [r4, #52]	; 0x34
    166a:	b141      	cbz	r1, 167e <setvbuf+0x56>
    166c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1670:	4299      	cmp	r1, r3
    1672:	d002      	beq.n	167a <setvbuf+0x52>
    1674:	4630      	mov	r0, r6
    1676:	f7ff fefb 	bl	1470 <_free_r>
    167a:	2300      	movs	r3, #0
    167c:	6363      	str	r3, [r4, #52]	; 0x34
    167e:	2300      	movs	r3, #0
    1680:	61a3      	str	r3, [r4, #24]
    1682:	6063      	str	r3, [r4, #4]
    1684:	89a3      	ldrh	r3, [r4, #12]
    1686:	061b      	lsls	r3, r3, #24
    1688:	d503      	bpl.n	1692 <setvbuf+0x6a>
    168a:	6921      	ldr	r1, [r4, #16]
    168c:	4630      	mov	r0, r6
    168e:	f7ff feef 	bl	1470 <_free_r>
    1692:	89a3      	ldrh	r3, [r4, #12]
    1694:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1698:	f023 0303 	bic.w	r3, r3, #3
    169c:	f1b8 0f02 	cmp.w	r8, #2
    16a0:	81a3      	strh	r3, [r4, #12]
    16a2:	d05d      	beq.n	1760 <setvbuf+0x138>
    16a4:	ab01      	add	r3, sp, #4
    16a6:	466a      	mov	r2, sp
    16a8:	4621      	mov	r1, r4
    16aa:	4630      	mov	r0, r6
    16ac:	f000 fca0 	bl	1ff0 <__swhatbuf_r>
    16b0:	89a3      	ldrh	r3, [r4, #12]
    16b2:	4318      	orrs	r0, r3
    16b4:	81a0      	strh	r0, [r4, #12]
    16b6:	bb2d      	cbnz	r5, 1704 <setvbuf+0xdc>
    16b8:	9d00      	ldr	r5, [sp, #0]
    16ba:	4628      	mov	r0, r5
    16bc:	f7ff fec8 	bl	1450 <malloc>
    16c0:	4607      	mov	r7, r0
    16c2:	2800      	cmp	r0, #0
    16c4:	d14e      	bne.n	1764 <setvbuf+0x13c>
    16c6:	f8dd 9000 	ldr.w	r9, [sp]
    16ca:	45a9      	cmp	r9, r5
    16cc:	d13c      	bne.n	1748 <setvbuf+0x120>
    16ce:	f04f 30ff 	mov.w	r0, #4294967295
    16d2:	89a3      	ldrh	r3, [r4, #12]
    16d4:	f043 0302 	orr.w	r3, r3, #2
    16d8:	81a3      	strh	r3, [r4, #12]
    16da:	2300      	movs	r3, #0
    16dc:	60a3      	str	r3, [r4, #8]
    16de:	f104 0347 	add.w	r3, r4, #71	; 0x47
    16e2:	6023      	str	r3, [r4, #0]
    16e4:	6123      	str	r3, [r4, #16]
    16e6:	2301      	movs	r3, #1
    16e8:	6163      	str	r3, [r4, #20]
    16ea:	b003      	add	sp, #12
    16ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    16f0:	4b22      	ldr	r3, [pc, #136]	; (177c <setvbuf+0x154>)
    16f2:	429c      	cmp	r4, r3
    16f4:	d101      	bne.n	16fa <setvbuf+0xd2>
    16f6:	68b4      	ldr	r4, [r6, #8]
    16f8:	e7a8      	b.n	164c <setvbuf+0x24>
    16fa:	4b21      	ldr	r3, [pc, #132]	; (1780 <setvbuf+0x158>)
    16fc:	429c      	cmp	r4, r3
    16fe:	bf08      	it	eq
    1700:	68f4      	ldreq	r4, [r6, #12]
    1702:	e7a3      	b.n	164c <setvbuf+0x24>
    1704:	2f00      	cmp	r7, #0
    1706:	d0d8      	beq.n	16ba <setvbuf+0x92>
    1708:	69b3      	ldr	r3, [r6, #24]
    170a:	b913      	cbnz	r3, 1712 <setvbuf+0xea>
    170c:	4630      	mov	r0, r6
    170e:	f000 fbe5 	bl	1edc <__sinit>
    1712:	f1b8 0f01 	cmp.w	r8, #1
    1716:	bf08      	it	eq
    1718:	89a3      	ldrheq	r3, [r4, #12]
    171a:	6027      	str	r7, [r4, #0]
    171c:	bf04      	itt	eq
    171e:	f043 0301 	orreq.w	r3, r3, #1
    1722:	81a3      	strheq	r3, [r4, #12]
    1724:	89a3      	ldrh	r3, [r4, #12]
    1726:	6127      	str	r7, [r4, #16]
    1728:	f013 0008 	ands.w	r0, r3, #8
    172c:	6165      	str	r5, [r4, #20]
    172e:	d01b      	beq.n	1768 <setvbuf+0x140>
    1730:	f013 0001 	ands.w	r0, r3, #1
    1734:	bf18      	it	ne
    1736:	426d      	negne	r5, r5
    1738:	f04f 0300 	mov.w	r3, #0
    173c:	bf1d      	ittte	ne
    173e:	60a3      	strne	r3, [r4, #8]
    1740:	61a5      	strne	r5, [r4, #24]
    1742:	4618      	movne	r0, r3
    1744:	60a5      	streq	r5, [r4, #8]
    1746:	e7d0      	b.n	16ea <setvbuf+0xc2>
    1748:	4648      	mov	r0, r9
    174a:	f7ff fe81 	bl	1450 <malloc>
    174e:	4607      	mov	r7, r0
    1750:	2800      	cmp	r0, #0
    1752:	d0bc      	beq.n	16ce <setvbuf+0xa6>
    1754:	89a3      	ldrh	r3, [r4, #12]
    1756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    175a:	81a3      	strh	r3, [r4, #12]
    175c:	464d      	mov	r5, r9
    175e:	e7d3      	b.n	1708 <setvbuf+0xe0>
    1760:	2000      	movs	r0, #0
    1762:	e7b6      	b.n	16d2 <setvbuf+0xaa>
    1764:	46a9      	mov	r9, r5
    1766:	e7f5      	b.n	1754 <setvbuf+0x12c>
    1768:	60a0      	str	r0, [r4, #8]
    176a:	e7be      	b.n	16ea <setvbuf+0xc2>
    176c:	f04f 30ff 	mov.w	r0, #4294967295
    1770:	e7bb      	b.n	16ea <setvbuf+0xc2>
    1772:	bf00      	nop
    1774:	20000000 	.word	0x20000000
    1778:	0000307c 	.word	0x0000307c
    177c:	0000309c 	.word	0x0000309c
    1780:	0000305c 	.word	0x0000305c

00001784 <_strerror_r>:
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
    1788:	4608      	mov	r0, r1
    178a:	4611      	mov	r1, r2
    178c:	288e      	cmp	r0, #142	; 0x8e
    178e:	f200 812f 	bhi.w	19f0 <_strerror_r+0x26c>
    1792:	e8df f010 	tbh	[pc, r0, lsl #1]
    1796:	0138      	.short	0x0138
    1798:	0091008f 	.word	0x0091008f
    179c:	00950093 	.word	0x00950093
    17a0:	00990097 	.word	0x00990097
    17a4:	009d009b 	.word	0x009d009b
    17a8:	00a300a1 	.word	0x00a300a1
    17ac:	00a900a7 	.word	0x00a900a7
    17b0:	00ad00ab 	.word	0x00ad00ab
    17b4:	00af012d 	.word	0x00af012d
    17b8:	00b300b1 	.word	0x00b300b1
    17bc:	00b700b5 	.word	0x00b700b5
    17c0:	00bf00bd 	.word	0x00bf00bd
    17c4:	00c700c5 	.word	0x00c700c5
    17c8:	00cb00c9 	.word	0x00cb00c9
    17cc:	00d100cd 	.word	0x00d100cd
    17d0:	00d700d5 	.word	0x00d700d5
    17d4:	00db00d9 	.word	0x00db00d9
    17d8:	00df00dd 	.word	0x00df00dd
    17dc:	00e300e1 	.word	0x00e300e1
    17e0:	012d012d 	.word	0x012d012d
    17e4:	012d012d 	.word	0x012d012d
    17e8:	012d012d 	.word	0x012d012d
    17ec:	012d012d 	.word	0x012d012d
    17f0:	00eb00e7 	.word	0x00eb00e7
    17f4:	012d012d 	.word	0x012d012d
    17f8:	012d012d 	.word	0x012d012d
    17fc:	012d012d 	.word	0x012d012d
    1800:	012d012d 	.word	0x012d012d
    1804:	012d012d 	.word	0x012d012d
    1808:	012d012d 	.word	0x012d012d
    180c:	00ed012d 	.word	0x00ed012d
    1810:	00ef0107 	.word	0x00ef0107
    1814:	012d00f1 	.word	0x012d00f1
    1818:	012d012d 	.word	0x012d012d
    181c:	012d00f3 	.word	0x012d00f3
    1820:	012d012d 	.word	0x012d012d
    1824:	012d00f5 	.word	0x012d00f5
    1828:	00f9012d 	.word	0x00f9012d
    182c:	012d012d 	.word	0x012d012d
    1830:	012d00fb 	.word	0x012d00fb
    1834:	012d012d 	.word	0x012d012d
    1838:	012d012d 	.word	0x012d012d
    183c:	012d012d 	.word	0x012d012d
    1840:	012d012d 	.word	0x012d012d
    1844:	00fd012d 	.word	0x00fd012d
    1848:	00ff012d 	.word	0x00ff012d
    184c:	01030101 	.word	0x01030101
    1850:	012d012d 	.word	0x012d012d
    1854:	012d0125 	.word	0x012d0125
    1858:	012d012d 	.word	0x012d012d
    185c:	012d012d 	.word	0x012d012d
    1860:	012d012d 	.word	0x012d012d
    1864:	0113012d 	.word	0x0113012d
    1868:	01090105 	.word	0x01090105
    186c:	010d010b 	.word	0x010d010b
    1870:	012d010f 	.word	0x012d010f
    1874:	01150111 	.word	0x01150111
    1878:	00e90119 	.word	0x00e90119
    187c:	012b00c1 	.word	0x012b00c1
    1880:	00cf00b9 	.word	0x00cf00b9
    1884:	009f00bb 	.word	0x009f00bb
    1888:	012900a5 	.word	0x012900a5
    188c:	012d00f7 	.word	0x012d00f7
    1890:	00c30117 	.word	0x00c30117
    1894:	011b011d 	.word	0x011b011d
    1898:	012d012d 	.word	0x012d012d
    189c:	012d012d 	.word	0x012d012d
    18a0:	00d3012d 	.word	0x00d3012d
    18a4:	012d012d 	.word	0x012d012d
    18a8:	00e5012d 	.word	0x00e5012d
    18ac:	011f0127 	.word	0x011f0127
    18b0:	01230121 	.word	0x01230121
    18b4:	4855      	ldr	r0, [pc, #340]	; (1a0c <_strerror_r+0x288>)
    18b6:	bd10      	pop	{r4, pc}
    18b8:	4855      	ldr	r0, [pc, #340]	; (1a10 <_strerror_r+0x28c>)
    18ba:	bd10      	pop	{r4, pc}
    18bc:	4855      	ldr	r0, [pc, #340]	; (1a14 <_strerror_r+0x290>)
    18be:	bd10      	pop	{r4, pc}
    18c0:	4855      	ldr	r0, [pc, #340]	; (1a18 <_strerror_r+0x294>)
    18c2:	bd10      	pop	{r4, pc}
    18c4:	4855      	ldr	r0, [pc, #340]	; (1a1c <_strerror_r+0x298>)
    18c6:	bd10      	pop	{r4, pc}
    18c8:	4855      	ldr	r0, [pc, #340]	; (1a20 <_strerror_r+0x29c>)
    18ca:	bd10      	pop	{r4, pc}
    18cc:	4855      	ldr	r0, [pc, #340]	; (1a24 <_strerror_r+0x2a0>)
    18ce:	bd10      	pop	{r4, pc}
    18d0:	4855      	ldr	r0, [pc, #340]	; (1a28 <_strerror_r+0x2a4>)
    18d2:	bd10      	pop	{r4, pc}
    18d4:	4855      	ldr	r0, [pc, #340]	; (1a2c <_strerror_r+0x2a8>)
    18d6:	bd10      	pop	{r4, pc}
    18d8:	4855      	ldr	r0, [pc, #340]	; (1a30 <_strerror_r+0x2ac>)
    18da:	bd10      	pop	{r4, pc}
    18dc:	4855      	ldr	r0, [pc, #340]	; (1a34 <_strerror_r+0x2b0>)
    18de:	bd10      	pop	{r4, pc}
    18e0:	4855      	ldr	r0, [pc, #340]	; (1a38 <_strerror_r+0x2b4>)
    18e2:	bd10      	pop	{r4, pc}
    18e4:	4855      	ldr	r0, [pc, #340]	; (1a3c <_strerror_r+0x2b8>)
    18e6:	bd10      	pop	{r4, pc}
    18e8:	4855      	ldr	r0, [pc, #340]	; (1a40 <_strerror_r+0x2bc>)
    18ea:	bd10      	pop	{r4, pc}
    18ec:	4855      	ldr	r0, [pc, #340]	; (1a44 <_strerror_r+0x2c0>)
    18ee:	bd10      	pop	{r4, pc}
    18f0:	4855      	ldr	r0, [pc, #340]	; (1a48 <_strerror_r+0x2c4>)
    18f2:	bd10      	pop	{r4, pc}
    18f4:	4855      	ldr	r0, [pc, #340]	; (1a4c <_strerror_r+0x2c8>)
    18f6:	bd10      	pop	{r4, pc}
    18f8:	4855      	ldr	r0, [pc, #340]	; (1a50 <_strerror_r+0x2cc>)
    18fa:	bd10      	pop	{r4, pc}
    18fc:	4855      	ldr	r0, [pc, #340]	; (1a54 <_strerror_r+0x2d0>)
    18fe:	bd10      	pop	{r4, pc}
    1900:	4855      	ldr	r0, [pc, #340]	; (1a58 <_strerror_r+0x2d4>)
    1902:	bd10      	pop	{r4, pc}
    1904:	4855      	ldr	r0, [pc, #340]	; (1a5c <_strerror_r+0x2d8>)
    1906:	bd10      	pop	{r4, pc}
    1908:	4855      	ldr	r0, [pc, #340]	; (1a60 <_strerror_r+0x2dc>)
    190a:	bd10      	pop	{r4, pc}
    190c:	4855      	ldr	r0, [pc, #340]	; (1a64 <_strerror_r+0x2e0>)
    190e:	bd10      	pop	{r4, pc}
    1910:	4855      	ldr	r0, [pc, #340]	; (1a68 <_strerror_r+0x2e4>)
    1912:	bd10      	pop	{r4, pc}
    1914:	4855      	ldr	r0, [pc, #340]	; (1a6c <_strerror_r+0x2e8>)
    1916:	bd10      	pop	{r4, pc}
    1918:	4855      	ldr	r0, [pc, #340]	; (1a70 <_strerror_r+0x2ec>)
    191a:	bd10      	pop	{r4, pc}
    191c:	4855      	ldr	r0, [pc, #340]	; (1a74 <_strerror_r+0x2f0>)
    191e:	bd10      	pop	{r4, pc}
    1920:	4855      	ldr	r0, [pc, #340]	; (1a78 <_strerror_r+0x2f4>)
    1922:	bd10      	pop	{r4, pc}
    1924:	4855      	ldr	r0, [pc, #340]	; (1a7c <_strerror_r+0x2f8>)
    1926:	bd10      	pop	{r4, pc}
    1928:	4855      	ldr	r0, [pc, #340]	; (1a80 <_strerror_r+0x2fc>)
    192a:	bd10      	pop	{r4, pc}
    192c:	4855      	ldr	r0, [pc, #340]	; (1a84 <_strerror_r+0x300>)
    192e:	bd10      	pop	{r4, pc}
    1930:	4855      	ldr	r0, [pc, #340]	; (1a88 <_strerror_r+0x304>)
    1932:	bd10      	pop	{r4, pc}
    1934:	4855      	ldr	r0, [pc, #340]	; (1a8c <_strerror_r+0x308>)
    1936:	bd10      	pop	{r4, pc}
    1938:	4855      	ldr	r0, [pc, #340]	; (1a90 <_strerror_r+0x30c>)
    193a:	bd10      	pop	{r4, pc}
    193c:	4855      	ldr	r0, [pc, #340]	; (1a94 <_strerror_r+0x310>)
    193e:	bd10      	pop	{r4, pc}
    1940:	4855      	ldr	r0, [pc, #340]	; (1a98 <_strerror_r+0x314>)
    1942:	bd10      	pop	{r4, pc}
    1944:	4855      	ldr	r0, [pc, #340]	; (1a9c <_strerror_r+0x318>)
    1946:	bd10      	pop	{r4, pc}
    1948:	4855      	ldr	r0, [pc, #340]	; (1aa0 <_strerror_r+0x31c>)
    194a:	bd10      	pop	{r4, pc}
    194c:	4855      	ldr	r0, [pc, #340]	; (1aa4 <_strerror_r+0x320>)
    194e:	bd10      	pop	{r4, pc}
    1950:	4855      	ldr	r0, [pc, #340]	; (1aa8 <_strerror_r+0x324>)
    1952:	bd10      	pop	{r4, pc}
    1954:	4855      	ldr	r0, [pc, #340]	; (1aac <_strerror_r+0x328>)
    1956:	bd10      	pop	{r4, pc}
    1958:	4855      	ldr	r0, [pc, #340]	; (1ab0 <_strerror_r+0x32c>)
    195a:	bd10      	pop	{r4, pc}
    195c:	4855      	ldr	r0, [pc, #340]	; (1ab4 <_strerror_r+0x330>)
    195e:	bd10      	pop	{r4, pc}
    1960:	4855      	ldr	r0, [pc, #340]	; (1ab8 <_strerror_r+0x334>)
    1962:	bd10      	pop	{r4, pc}
    1964:	4855      	ldr	r0, [pc, #340]	; (1abc <_strerror_r+0x338>)
    1966:	bd10      	pop	{r4, pc}
    1968:	4855      	ldr	r0, [pc, #340]	; (1ac0 <_strerror_r+0x33c>)
    196a:	bd10      	pop	{r4, pc}
    196c:	4855      	ldr	r0, [pc, #340]	; (1ac4 <_strerror_r+0x340>)
    196e:	bd10      	pop	{r4, pc}
    1970:	4855      	ldr	r0, [pc, #340]	; (1ac8 <_strerror_r+0x344>)
    1972:	bd10      	pop	{r4, pc}
    1974:	4855      	ldr	r0, [pc, #340]	; (1acc <_strerror_r+0x348>)
    1976:	bd10      	pop	{r4, pc}
    1978:	4855      	ldr	r0, [pc, #340]	; (1ad0 <_strerror_r+0x34c>)
    197a:	bd10      	pop	{r4, pc}
    197c:	4855      	ldr	r0, [pc, #340]	; (1ad4 <_strerror_r+0x350>)
    197e:	bd10      	pop	{r4, pc}
    1980:	4855      	ldr	r0, [pc, #340]	; (1ad8 <_strerror_r+0x354>)
    1982:	bd10      	pop	{r4, pc}
    1984:	4855      	ldr	r0, [pc, #340]	; (1adc <_strerror_r+0x358>)
    1986:	bd10      	pop	{r4, pc}
    1988:	4855      	ldr	r0, [pc, #340]	; (1ae0 <_strerror_r+0x35c>)
    198a:	bd10      	pop	{r4, pc}
    198c:	4855      	ldr	r0, [pc, #340]	; (1ae4 <_strerror_r+0x360>)
    198e:	bd10      	pop	{r4, pc}
    1990:	4855      	ldr	r0, [pc, #340]	; (1ae8 <_strerror_r+0x364>)
    1992:	bd10      	pop	{r4, pc}
    1994:	4855      	ldr	r0, [pc, #340]	; (1aec <_strerror_r+0x368>)
    1996:	bd10      	pop	{r4, pc}
    1998:	4855      	ldr	r0, [pc, #340]	; (1af0 <_strerror_r+0x36c>)
    199a:	bd10      	pop	{r4, pc}
    199c:	4855      	ldr	r0, [pc, #340]	; (1af4 <_strerror_r+0x370>)
    199e:	bd10      	pop	{r4, pc}
    19a0:	4855      	ldr	r0, [pc, #340]	; (1af8 <_strerror_r+0x374>)
    19a2:	bd10      	pop	{r4, pc}
    19a4:	4855      	ldr	r0, [pc, #340]	; (1afc <_strerror_r+0x378>)
    19a6:	bd10      	pop	{r4, pc}
    19a8:	4855      	ldr	r0, [pc, #340]	; (1b00 <_strerror_r+0x37c>)
    19aa:	bd10      	pop	{r4, pc}
    19ac:	4855      	ldr	r0, [pc, #340]	; (1b04 <_strerror_r+0x380>)
    19ae:	bd10      	pop	{r4, pc}
    19b0:	4855      	ldr	r0, [pc, #340]	; (1b08 <_strerror_r+0x384>)
    19b2:	bd10      	pop	{r4, pc}
    19b4:	4855      	ldr	r0, [pc, #340]	; (1b0c <_strerror_r+0x388>)
    19b6:	bd10      	pop	{r4, pc}
    19b8:	4855      	ldr	r0, [pc, #340]	; (1b10 <_strerror_r+0x38c>)
    19ba:	bd10      	pop	{r4, pc}
    19bc:	4855      	ldr	r0, [pc, #340]	; (1b14 <_strerror_r+0x390>)
    19be:	bd10      	pop	{r4, pc}
    19c0:	4855      	ldr	r0, [pc, #340]	; (1b18 <_strerror_r+0x394>)
    19c2:	bd10      	pop	{r4, pc}
    19c4:	4855      	ldr	r0, [pc, #340]	; (1b1c <_strerror_r+0x398>)
    19c6:	bd10      	pop	{r4, pc}
    19c8:	4855      	ldr	r0, [pc, #340]	; (1b20 <_strerror_r+0x39c>)
    19ca:	bd10      	pop	{r4, pc}
    19cc:	4855      	ldr	r0, [pc, #340]	; (1b24 <_strerror_r+0x3a0>)
    19ce:	bd10      	pop	{r4, pc}
    19d0:	4855      	ldr	r0, [pc, #340]	; (1b28 <_strerror_r+0x3a4>)
    19d2:	bd10      	pop	{r4, pc}
    19d4:	4855      	ldr	r0, [pc, #340]	; (1b2c <_strerror_r+0x3a8>)
    19d6:	bd10      	pop	{r4, pc}
    19d8:	4855      	ldr	r0, [pc, #340]	; (1b30 <_strerror_r+0x3ac>)
    19da:	bd10      	pop	{r4, pc}
    19dc:	4855      	ldr	r0, [pc, #340]	; (1b34 <_strerror_r+0x3b0>)
    19de:	bd10      	pop	{r4, pc}
    19e0:	4855      	ldr	r0, [pc, #340]	; (1b38 <_strerror_r+0x3b4>)
    19e2:	bd10      	pop	{r4, pc}
    19e4:	4855      	ldr	r0, [pc, #340]	; (1b3c <_strerror_r+0x3b8>)
    19e6:	bd10      	pop	{r4, pc}
    19e8:	4855      	ldr	r0, [pc, #340]	; (1b40 <_strerror_r+0x3bc>)
    19ea:	bd10      	pop	{r4, pc}
    19ec:	4855      	ldr	r0, [pc, #340]	; (1b44 <_strerror_r+0x3c0>)
    19ee:	bd10      	pop	{r4, pc}
    19f0:	2b00      	cmp	r3, #0
    19f2:	bf14      	ite	ne
    19f4:	461a      	movne	r2, r3
    19f6:	4622      	moveq	r2, r4
    19f8:	f000 f8bc 	bl	1b74 <_user_strerror>
    19fc:	4b52      	ldr	r3, [pc, #328]	; (1b48 <_strerror_r+0x3c4>)
    19fe:	2800      	cmp	r0, #0
    1a00:	bf08      	it	eq
    1a02:	4618      	moveq	r0, r3
    1a04:	bd10      	pop	{r4, pc}
    1a06:	4851      	ldr	r0, [pc, #324]	; (1b4c <_strerror_r+0x3c8>)
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	bf00      	nop
    1a0c:	000029cc 	.word	0x000029cc
    1a10:	000029d6 	.word	0x000029d6
    1a14:	000029f0 	.word	0x000029f0
    1a18:	00002a00 	.word	0x00002a00
    1a1c:	00002a18 	.word	0x00002a18
    1a20:	00002a22 	.word	0x00002a22
    1a24:	00002a3c 	.word	0x00002a3c
    1a28:	00002a4e 	.word	0x00002a4e
    1a2c:	00002a60 	.word	0x00002a60
    1a30:	00002a79 	.word	0x00002a79
    1a34:	00002a89 	.word	0x00002a89
    1a38:	00002a95 	.word	0x00002a95
    1a3c:	00002ab2 	.word	0x00002ab2
    1a40:	00002ac4 	.word	0x00002ac4
    1a44:	00002ad5 	.word	0x00002ad5
    1a48:	00002ae7 	.word	0x00002ae7
    1a4c:	00002af3 	.word	0x00002af3
    1a50:	00002b0b 	.word	0x00002b0b
    1a54:	00002b17 	.word	0x00002b17
    1a58:	00002b29 	.word	0x00002b29
    1a5c:	00002b38 	.word	0x00002b38
    1a60:	00002b48 	.word	0x00002b48
    1a64:	00002b55 	.word	0x00002b55
    1a68:	00002b74 	.word	0x00002b74
    1a6c:	00002b83 	.word	0x00002b83
    1a70:	00002b94 	.word	0x00002b94
    1a74:	00002bb8 	.word	0x00002bb8
    1a78:	00002bd6 	.word	0x00002bd6
    1a7c:	00002bf4 	.word	0x00002bf4
    1a80:	00002c14 	.word	0x00002c14
    1a84:	00002c2b 	.word	0x00002c2b
    1a88:	00002c3a 	.word	0x00002c3a
    1a8c:	00002c49 	.word	0x00002c49
    1a90:	00002c5d 	.word	0x00002c5d
    1a94:	00002c75 	.word	0x00002c75
    1a98:	00002c83 	.word	0x00002c83
    1a9c:	00002c90 	.word	0x00002c90
    1aa0:	00002ca6 	.word	0x00002ca6
    1aa4:	00002cb5 	.word	0x00002cb5
    1aa8:	00002cc1 	.word	0x00002cc1
    1aac:	00002cf0 	.word	0x00002cf0
    1ab0:	00002d01 	.word	0x00002d01
    1ab4:	00002d1c 	.word	0x00002d1c
    1ab8:	00002d2f 	.word	0x00002d2f
    1abc:	00002d45 	.word	0x00002d45
    1ac0:	00002d4e 	.word	0x00002d4e
    1ac4:	00002d65 	.word	0x00002d65
    1ac8:	00002d6d 	.word	0x00002d6d
    1acc:	00002d7a 	.word	0x00002d7a
    1ad0:	00002d8f 	.word	0x00002d8f
    1ad4:	00002da3 	.word	0x00002da3
    1ad8:	00002dbb 	.word	0x00002dbb
    1adc:	00002dca 	.word	0x00002dca
    1ae0:	00002ddb 	.word	0x00002ddb
    1ae4:	00002dee 	.word	0x00002dee
    1ae8:	00002dfa 	.word	0x00002dfa
    1aec:	00002e13 	.word	0x00002e13
    1af0:	00002e27 	.word	0x00002e27
    1af4:	00002e42 	.word	0x00002e42
    1af8:	00002e5a 	.word	0x00002e5a
    1afc:	00002e74 	.word	0x00002e74
    1b00:	00002e7c 	.word	0x00002e7c
    1b04:	00002eac 	.word	0x00002eac
    1b08:	00002ecb 	.word	0x00002ecb
    1b0c:	00002eea 	.word	0x00002eea
    1b10:	00002f01 	.word	0x00002f01
    1b14:	00002f14 	.word	0x00002f14
    1b18:	00002f2d 	.word	0x00002f2d
    1b1c:	00002f44 	.word	0x00002f44
    1b20:	00002f5a 	.word	0x00002f5a
    1b24:	00002f7b 	.word	0x00002f7b
    1b28:	00002f93 	.word	0x00002f93
    1b2c:	00002faf 	.word	0x00002faf
    1b30:	00002fc2 	.word	0x00002fc2
    1b34:	00002fd8 	.word	0x00002fd8
    1b38:	00002fec 	.word	0x00002fec
    1b3c:	0000300e 	.word	0x0000300e
    1b40:	00003034 	.word	0x00003034
    1b44:	00003045 	.word	0x00003045
    1b48:	000030c1 	.word	0x000030c1
    1b4c:	000029c4 	.word	0x000029c4

00001b50 <strerror>:
    1b50:	4601      	mov	r1, r0
    1b52:	4803      	ldr	r0, [pc, #12]	; (1b60 <strerror+0x10>)
    1b54:	2300      	movs	r3, #0
    1b56:	461a      	mov	r2, r3
    1b58:	6800      	ldr	r0, [r0, #0]
    1b5a:	f7ff be13 	b.w	1784 <_strerror_r>
    1b5e:	bf00      	nop
    1b60:	20000000 	.word	0x20000000

00001b64 <strlen>:
    1b64:	4603      	mov	r3, r0
    1b66:	f813 2b01 	ldrb.w	r2, [r3], #1
    1b6a:	2a00      	cmp	r2, #0
    1b6c:	d1fb      	bne.n	1b66 <strlen+0x2>
    1b6e:	1a18      	subs	r0, r3, r0
    1b70:	3801      	subs	r0, #1
    1b72:	4770      	bx	lr

00001b74 <_user_strerror>:
    1b74:	2000      	movs	r0, #0
    1b76:	4770      	bx	lr

00001b78 <__swbuf_r>:
    1b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b7a:	460e      	mov	r6, r1
    1b7c:	4614      	mov	r4, r2
    1b7e:	4605      	mov	r5, r0
    1b80:	b118      	cbz	r0, 1b8a <__swbuf_r+0x12>
    1b82:	6983      	ldr	r3, [r0, #24]
    1b84:	b90b      	cbnz	r3, 1b8a <__swbuf_r+0x12>
    1b86:	f000 f9a9 	bl	1edc <__sinit>
    1b8a:	4b21      	ldr	r3, [pc, #132]	; (1c10 <__swbuf_r+0x98>)
    1b8c:	429c      	cmp	r4, r3
    1b8e:	d12a      	bne.n	1be6 <__swbuf_r+0x6e>
    1b90:	686c      	ldr	r4, [r5, #4]
    1b92:	69a3      	ldr	r3, [r4, #24]
    1b94:	60a3      	str	r3, [r4, #8]
    1b96:	89a3      	ldrh	r3, [r4, #12]
    1b98:	071a      	lsls	r2, r3, #28
    1b9a:	d52e      	bpl.n	1bfa <__swbuf_r+0x82>
    1b9c:	6923      	ldr	r3, [r4, #16]
    1b9e:	b363      	cbz	r3, 1bfa <__swbuf_r+0x82>
    1ba0:	6923      	ldr	r3, [r4, #16]
    1ba2:	6820      	ldr	r0, [r4, #0]
    1ba4:	1ac0      	subs	r0, r0, r3
    1ba6:	6963      	ldr	r3, [r4, #20]
    1ba8:	b2f6      	uxtb	r6, r6
    1baa:	4298      	cmp	r0, r3
    1bac:	4637      	mov	r7, r6
    1bae:	db04      	blt.n	1bba <__swbuf_r+0x42>
    1bb0:	4621      	mov	r1, r4
    1bb2:	4628      	mov	r0, r5
    1bb4:	f000 f928 	bl	1e08 <_fflush_r>
    1bb8:	bb28      	cbnz	r0, 1c06 <__swbuf_r+0x8e>
    1bba:	68a3      	ldr	r3, [r4, #8]
    1bbc:	3b01      	subs	r3, #1
    1bbe:	60a3      	str	r3, [r4, #8]
    1bc0:	6823      	ldr	r3, [r4, #0]
    1bc2:	1c5a      	adds	r2, r3, #1
    1bc4:	6022      	str	r2, [r4, #0]
    1bc6:	701e      	strb	r6, [r3, #0]
    1bc8:	6963      	ldr	r3, [r4, #20]
    1bca:	3001      	adds	r0, #1
    1bcc:	4298      	cmp	r0, r3
    1bce:	d004      	beq.n	1bda <__swbuf_r+0x62>
    1bd0:	89a3      	ldrh	r3, [r4, #12]
    1bd2:	07db      	lsls	r3, r3, #31
    1bd4:	d519      	bpl.n	1c0a <__swbuf_r+0x92>
    1bd6:	2e0a      	cmp	r6, #10
    1bd8:	d117      	bne.n	1c0a <__swbuf_r+0x92>
    1bda:	4621      	mov	r1, r4
    1bdc:	4628      	mov	r0, r5
    1bde:	f000 f913 	bl	1e08 <_fflush_r>
    1be2:	b190      	cbz	r0, 1c0a <__swbuf_r+0x92>
    1be4:	e00f      	b.n	1c06 <__swbuf_r+0x8e>
    1be6:	4b0b      	ldr	r3, [pc, #44]	; (1c14 <__swbuf_r+0x9c>)
    1be8:	429c      	cmp	r4, r3
    1bea:	d101      	bne.n	1bf0 <__swbuf_r+0x78>
    1bec:	68ac      	ldr	r4, [r5, #8]
    1bee:	e7d0      	b.n	1b92 <__swbuf_r+0x1a>
    1bf0:	4b09      	ldr	r3, [pc, #36]	; (1c18 <__swbuf_r+0xa0>)
    1bf2:	429c      	cmp	r4, r3
    1bf4:	bf08      	it	eq
    1bf6:	68ec      	ldreq	r4, [r5, #12]
    1bf8:	e7cb      	b.n	1b92 <__swbuf_r+0x1a>
    1bfa:	4621      	mov	r1, r4
    1bfc:	4628      	mov	r0, r5
    1bfe:	f000 f80d 	bl	1c1c <__swsetup_r>
    1c02:	2800      	cmp	r0, #0
    1c04:	d0cc      	beq.n	1ba0 <__swbuf_r+0x28>
    1c06:	f04f 37ff 	mov.w	r7, #4294967295
    1c0a:	4638      	mov	r0, r7
    1c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c0e:	bf00      	nop
    1c10:	0000307c 	.word	0x0000307c
    1c14:	0000309c 	.word	0x0000309c
    1c18:	0000305c 	.word	0x0000305c

00001c1c <__swsetup_r>:
    1c1c:	4b32      	ldr	r3, [pc, #200]	; (1ce8 <__swsetup_r+0xcc>)
    1c1e:	b570      	push	{r4, r5, r6, lr}
    1c20:	681d      	ldr	r5, [r3, #0]
    1c22:	4606      	mov	r6, r0
    1c24:	460c      	mov	r4, r1
    1c26:	b125      	cbz	r5, 1c32 <__swsetup_r+0x16>
    1c28:	69ab      	ldr	r3, [r5, #24]
    1c2a:	b913      	cbnz	r3, 1c32 <__swsetup_r+0x16>
    1c2c:	4628      	mov	r0, r5
    1c2e:	f000 f955 	bl	1edc <__sinit>
    1c32:	4b2e      	ldr	r3, [pc, #184]	; (1cec <__swsetup_r+0xd0>)
    1c34:	429c      	cmp	r4, r3
    1c36:	d10f      	bne.n	1c58 <__swsetup_r+0x3c>
    1c38:	686c      	ldr	r4, [r5, #4]
    1c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c3e:	b29a      	uxth	r2, r3
    1c40:	0715      	lsls	r5, r2, #28
    1c42:	d42c      	bmi.n	1c9e <__swsetup_r+0x82>
    1c44:	06d0      	lsls	r0, r2, #27
    1c46:	d411      	bmi.n	1c6c <__swsetup_r+0x50>
    1c48:	2209      	movs	r2, #9
    1c4a:	6032      	str	r2, [r6, #0]
    1c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c50:	81a3      	strh	r3, [r4, #12]
    1c52:	f04f 30ff 	mov.w	r0, #4294967295
    1c56:	bd70      	pop	{r4, r5, r6, pc}
    1c58:	4b25      	ldr	r3, [pc, #148]	; (1cf0 <__swsetup_r+0xd4>)
    1c5a:	429c      	cmp	r4, r3
    1c5c:	d101      	bne.n	1c62 <__swsetup_r+0x46>
    1c5e:	68ac      	ldr	r4, [r5, #8]
    1c60:	e7eb      	b.n	1c3a <__swsetup_r+0x1e>
    1c62:	4b24      	ldr	r3, [pc, #144]	; (1cf4 <__swsetup_r+0xd8>)
    1c64:	429c      	cmp	r4, r3
    1c66:	bf08      	it	eq
    1c68:	68ec      	ldreq	r4, [r5, #12]
    1c6a:	e7e6      	b.n	1c3a <__swsetup_r+0x1e>
    1c6c:	0751      	lsls	r1, r2, #29
    1c6e:	d512      	bpl.n	1c96 <__swsetup_r+0x7a>
    1c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c72:	b141      	cbz	r1, 1c86 <__swsetup_r+0x6a>
    1c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1c78:	4299      	cmp	r1, r3
    1c7a:	d002      	beq.n	1c82 <__swsetup_r+0x66>
    1c7c:	4630      	mov	r0, r6
    1c7e:	f7ff fbf7 	bl	1470 <_free_r>
    1c82:	2300      	movs	r3, #0
    1c84:	6363      	str	r3, [r4, #52]	; 0x34
    1c86:	89a3      	ldrh	r3, [r4, #12]
    1c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1c8c:	81a3      	strh	r3, [r4, #12]
    1c8e:	2300      	movs	r3, #0
    1c90:	6063      	str	r3, [r4, #4]
    1c92:	6923      	ldr	r3, [r4, #16]
    1c94:	6023      	str	r3, [r4, #0]
    1c96:	89a3      	ldrh	r3, [r4, #12]
    1c98:	f043 0308 	orr.w	r3, r3, #8
    1c9c:	81a3      	strh	r3, [r4, #12]
    1c9e:	6923      	ldr	r3, [r4, #16]
    1ca0:	b94b      	cbnz	r3, 1cb6 <__swsetup_r+0x9a>
    1ca2:	89a3      	ldrh	r3, [r4, #12]
    1ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1cac:	d003      	beq.n	1cb6 <__swsetup_r+0x9a>
    1cae:	4621      	mov	r1, r4
    1cb0:	4630      	mov	r0, r6
    1cb2:	f000 f9c1 	bl	2038 <__smakebuf_r>
    1cb6:	89a2      	ldrh	r2, [r4, #12]
    1cb8:	f012 0301 	ands.w	r3, r2, #1
    1cbc:	d00c      	beq.n	1cd8 <__swsetup_r+0xbc>
    1cbe:	2300      	movs	r3, #0
    1cc0:	60a3      	str	r3, [r4, #8]
    1cc2:	6963      	ldr	r3, [r4, #20]
    1cc4:	425b      	negs	r3, r3
    1cc6:	61a3      	str	r3, [r4, #24]
    1cc8:	6923      	ldr	r3, [r4, #16]
    1cca:	b953      	cbnz	r3, 1ce2 <__swsetup_r+0xc6>
    1ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1cd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1cd4:	d1ba      	bne.n	1c4c <__swsetup_r+0x30>
    1cd6:	bd70      	pop	{r4, r5, r6, pc}
    1cd8:	0792      	lsls	r2, r2, #30
    1cda:	bf58      	it	pl
    1cdc:	6963      	ldrpl	r3, [r4, #20]
    1cde:	60a3      	str	r3, [r4, #8]
    1ce0:	e7f2      	b.n	1cc8 <__swsetup_r+0xac>
    1ce2:	2000      	movs	r0, #0
    1ce4:	e7f7      	b.n	1cd6 <__swsetup_r+0xba>
    1ce6:	bf00      	nop
    1ce8:	20000000 	.word	0x20000000
    1cec:	0000307c 	.word	0x0000307c
    1cf0:	0000309c 	.word	0x0000309c
    1cf4:	0000305c 	.word	0x0000305c

00001cf8 <__sflush_r>:
    1cf8:	898a      	ldrh	r2, [r1, #12]
    1cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cfe:	4605      	mov	r5, r0
    1d00:	0710      	lsls	r0, r2, #28
    1d02:	460c      	mov	r4, r1
    1d04:	d45a      	bmi.n	1dbc <__sflush_r+0xc4>
    1d06:	684b      	ldr	r3, [r1, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	dc05      	bgt.n	1d18 <__sflush_r+0x20>
    1d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1d0e:	2b00      	cmp	r3, #0
    1d10:	dc02      	bgt.n	1d18 <__sflush_r+0x20>
    1d12:	2000      	movs	r0, #0
    1d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1d1a:	2e00      	cmp	r6, #0
    1d1c:	d0f9      	beq.n	1d12 <__sflush_r+0x1a>
    1d1e:	2300      	movs	r3, #0
    1d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1d24:	682f      	ldr	r7, [r5, #0]
    1d26:	602b      	str	r3, [r5, #0]
    1d28:	d033      	beq.n	1d92 <__sflush_r+0x9a>
    1d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1d2c:	89a3      	ldrh	r3, [r4, #12]
    1d2e:	075a      	lsls	r2, r3, #29
    1d30:	d505      	bpl.n	1d3e <__sflush_r+0x46>
    1d32:	6863      	ldr	r3, [r4, #4]
    1d34:	1ac0      	subs	r0, r0, r3
    1d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1d38:	b10b      	cbz	r3, 1d3e <__sflush_r+0x46>
    1d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d3c:	1ac0      	subs	r0, r0, r3
    1d3e:	2300      	movs	r3, #0
    1d40:	4602      	mov	r2, r0
    1d42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1d44:	6a21      	ldr	r1, [r4, #32]
    1d46:	4628      	mov	r0, r5
    1d48:	47b0      	blx	r6
    1d4a:	1c43      	adds	r3, r0, #1
    1d4c:	89a3      	ldrh	r3, [r4, #12]
    1d4e:	d106      	bne.n	1d5e <__sflush_r+0x66>
    1d50:	6829      	ldr	r1, [r5, #0]
    1d52:	291d      	cmp	r1, #29
    1d54:	d84b      	bhi.n	1dee <__sflush_r+0xf6>
    1d56:	4a2b      	ldr	r2, [pc, #172]	; (1e04 <__sflush_r+0x10c>)
    1d58:	40ca      	lsrs	r2, r1
    1d5a:	07d6      	lsls	r6, r2, #31
    1d5c:	d547      	bpl.n	1dee <__sflush_r+0xf6>
    1d5e:	2200      	movs	r2, #0
    1d60:	6062      	str	r2, [r4, #4]
    1d62:	04d9      	lsls	r1, r3, #19
    1d64:	6922      	ldr	r2, [r4, #16]
    1d66:	6022      	str	r2, [r4, #0]
    1d68:	d504      	bpl.n	1d74 <__sflush_r+0x7c>
    1d6a:	1c42      	adds	r2, r0, #1
    1d6c:	d101      	bne.n	1d72 <__sflush_r+0x7a>
    1d6e:	682b      	ldr	r3, [r5, #0]
    1d70:	b903      	cbnz	r3, 1d74 <__sflush_r+0x7c>
    1d72:	6560      	str	r0, [r4, #84]	; 0x54
    1d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1d76:	602f      	str	r7, [r5, #0]
    1d78:	2900      	cmp	r1, #0
    1d7a:	d0ca      	beq.n	1d12 <__sflush_r+0x1a>
    1d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1d80:	4299      	cmp	r1, r3
    1d82:	d002      	beq.n	1d8a <__sflush_r+0x92>
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff fb73 	bl	1470 <_free_r>
    1d8a:	2000      	movs	r0, #0
    1d8c:	6360      	str	r0, [r4, #52]	; 0x34
    1d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d92:	6a21      	ldr	r1, [r4, #32]
    1d94:	2301      	movs	r3, #1
    1d96:	4628      	mov	r0, r5
    1d98:	47b0      	blx	r6
    1d9a:	1c41      	adds	r1, r0, #1
    1d9c:	d1c6      	bne.n	1d2c <__sflush_r+0x34>
    1d9e:	682b      	ldr	r3, [r5, #0]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d0c3      	beq.n	1d2c <__sflush_r+0x34>
    1da4:	2b1d      	cmp	r3, #29
    1da6:	d001      	beq.n	1dac <__sflush_r+0xb4>
    1da8:	2b16      	cmp	r3, #22
    1daa:	d101      	bne.n	1db0 <__sflush_r+0xb8>
    1dac:	602f      	str	r7, [r5, #0]
    1dae:	e7b0      	b.n	1d12 <__sflush_r+0x1a>
    1db0:	89a3      	ldrh	r3, [r4, #12]
    1db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1db6:	81a3      	strh	r3, [r4, #12]
    1db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dbc:	690f      	ldr	r7, [r1, #16]
    1dbe:	2f00      	cmp	r7, #0
    1dc0:	d0a7      	beq.n	1d12 <__sflush_r+0x1a>
    1dc2:	0793      	lsls	r3, r2, #30
    1dc4:	680e      	ldr	r6, [r1, #0]
    1dc6:	bf08      	it	eq
    1dc8:	694b      	ldreq	r3, [r1, #20]
    1dca:	600f      	str	r7, [r1, #0]
    1dcc:	bf18      	it	ne
    1dce:	2300      	movne	r3, #0
    1dd0:	eba6 0807 	sub.w	r8, r6, r7
    1dd4:	608b      	str	r3, [r1, #8]
    1dd6:	f1b8 0f00 	cmp.w	r8, #0
    1dda:	dd9a      	ble.n	1d12 <__sflush_r+0x1a>
    1ddc:	4643      	mov	r3, r8
    1dde:	463a      	mov	r2, r7
    1de0:	6a21      	ldr	r1, [r4, #32]
    1de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1de4:	4628      	mov	r0, r5
    1de6:	47b0      	blx	r6
    1de8:	2800      	cmp	r0, #0
    1dea:	dc07      	bgt.n	1dfc <__sflush_r+0x104>
    1dec:	89a3      	ldrh	r3, [r4, #12]
    1dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1df2:	81a3      	strh	r3, [r4, #12]
    1df4:	f04f 30ff 	mov.w	r0, #4294967295
    1df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dfc:	4407      	add	r7, r0
    1dfe:	eba8 0800 	sub.w	r8, r8, r0
    1e02:	e7e8      	b.n	1dd6 <__sflush_r+0xde>
    1e04:	20400001 	.word	0x20400001

00001e08 <_fflush_r>:
    1e08:	b538      	push	{r3, r4, r5, lr}
    1e0a:	690b      	ldr	r3, [r1, #16]
    1e0c:	4605      	mov	r5, r0
    1e0e:	460c      	mov	r4, r1
    1e10:	b1db      	cbz	r3, 1e4a <_fflush_r+0x42>
    1e12:	b118      	cbz	r0, 1e1c <_fflush_r+0x14>
    1e14:	6983      	ldr	r3, [r0, #24]
    1e16:	b90b      	cbnz	r3, 1e1c <_fflush_r+0x14>
    1e18:	f000 f860 	bl	1edc <__sinit>
    1e1c:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <_fflush_r+0x48>)
    1e1e:	429c      	cmp	r4, r3
    1e20:	d109      	bne.n	1e36 <_fflush_r+0x2e>
    1e22:	686c      	ldr	r4, [r5, #4]
    1e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e28:	b17b      	cbz	r3, 1e4a <_fflush_r+0x42>
    1e2a:	4621      	mov	r1, r4
    1e2c:	4628      	mov	r0, r5
    1e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1e32:	f7ff bf61 	b.w	1cf8 <__sflush_r>
    1e36:	4b07      	ldr	r3, [pc, #28]	; (1e54 <_fflush_r+0x4c>)
    1e38:	429c      	cmp	r4, r3
    1e3a:	d101      	bne.n	1e40 <_fflush_r+0x38>
    1e3c:	68ac      	ldr	r4, [r5, #8]
    1e3e:	e7f1      	b.n	1e24 <_fflush_r+0x1c>
    1e40:	4b05      	ldr	r3, [pc, #20]	; (1e58 <_fflush_r+0x50>)
    1e42:	429c      	cmp	r4, r3
    1e44:	bf08      	it	eq
    1e46:	68ec      	ldreq	r4, [r5, #12]
    1e48:	e7ec      	b.n	1e24 <_fflush_r+0x1c>
    1e4a:	2000      	movs	r0, #0
    1e4c:	bd38      	pop	{r3, r4, r5, pc}
    1e4e:	bf00      	nop
    1e50:	0000307c 	.word	0x0000307c
    1e54:	0000309c 	.word	0x0000309c
    1e58:	0000305c 	.word	0x0000305c

00001e5c <_cleanup_r>:
    1e5c:	4901      	ldr	r1, [pc, #4]	; (1e64 <_cleanup_r+0x8>)
    1e5e:	f000 b8a9 	b.w	1fb4 <_fwalk_reent>
    1e62:	bf00      	nop
    1e64:	00001e09 	.word	0x00001e09

00001e68 <std.isra.0>:
    1e68:	2300      	movs	r3, #0
    1e6a:	b510      	push	{r4, lr}
    1e6c:	4604      	mov	r4, r0
    1e6e:	6003      	str	r3, [r0, #0]
    1e70:	6043      	str	r3, [r0, #4]
    1e72:	6083      	str	r3, [r0, #8]
    1e74:	8181      	strh	r1, [r0, #12]
    1e76:	6643      	str	r3, [r0, #100]	; 0x64
    1e78:	81c2      	strh	r2, [r0, #14]
    1e7a:	6103      	str	r3, [r0, #16]
    1e7c:	6143      	str	r3, [r0, #20]
    1e7e:	6183      	str	r3, [r0, #24]
    1e80:	4619      	mov	r1, r3
    1e82:	2208      	movs	r2, #8
    1e84:	305c      	adds	r0, #92	; 0x5c
    1e86:	f7ff faeb 	bl	1460 <memset>
    1e8a:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <std.isra.0+0x38>)
    1e8c:	6263      	str	r3, [r4, #36]	; 0x24
    1e8e:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <std.isra.0+0x3c>)
    1e90:	62a3      	str	r3, [r4, #40]	; 0x28
    1e92:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <std.isra.0+0x40>)
    1e94:	62e3      	str	r3, [r4, #44]	; 0x2c
    1e96:	4b05      	ldr	r3, [pc, #20]	; (1eac <std.isra.0+0x44>)
    1e98:	6224      	str	r4, [r4, #32]
    1e9a:	6323      	str	r3, [r4, #48]	; 0x30
    1e9c:	bd10      	pop	{r4, pc}
    1e9e:	bf00      	nop
    1ea0:	00002665 	.word	0x00002665
    1ea4:	00002687 	.word	0x00002687
    1ea8:	000026bf 	.word	0x000026bf
    1eac:	000026e3 	.word	0x000026e3

00001eb0 <__sfmoreglue>:
    1eb0:	b570      	push	{r4, r5, r6, lr}
    1eb2:	1e4a      	subs	r2, r1, #1
    1eb4:	2568      	movs	r5, #104	; 0x68
    1eb6:	4355      	muls	r5, r2
    1eb8:	460e      	mov	r6, r1
    1eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1ebe:	f7ff fb25 	bl	150c <_malloc_r>
    1ec2:	4604      	mov	r4, r0
    1ec4:	b140      	cbz	r0, 1ed8 <__sfmoreglue+0x28>
    1ec6:	2100      	movs	r1, #0
    1ec8:	e880 0042 	stmia.w	r0, {r1, r6}
    1ecc:	300c      	adds	r0, #12
    1ece:	60a0      	str	r0, [r4, #8]
    1ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1ed4:	f7ff fac4 	bl	1460 <memset>
    1ed8:	4620      	mov	r0, r4
    1eda:	bd70      	pop	{r4, r5, r6, pc}

00001edc <__sinit>:
    1edc:	6983      	ldr	r3, [r0, #24]
    1ede:	b510      	push	{r4, lr}
    1ee0:	4604      	mov	r4, r0
    1ee2:	bb33      	cbnz	r3, 1f32 <__sinit+0x56>
    1ee4:	6483      	str	r3, [r0, #72]	; 0x48
    1ee6:	64c3      	str	r3, [r0, #76]	; 0x4c
    1ee8:	6503      	str	r3, [r0, #80]	; 0x50
    1eea:	4b12      	ldr	r3, [pc, #72]	; (1f34 <__sinit+0x58>)
    1eec:	4a12      	ldr	r2, [pc, #72]	; (1f38 <__sinit+0x5c>)
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	6282      	str	r2, [r0, #40]	; 0x28
    1ef2:	4298      	cmp	r0, r3
    1ef4:	bf04      	itt	eq
    1ef6:	2301      	moveq	r3, #1
    1ef8:	6183      	streq	r3, [r0, #24]
    1efa:	f000 f81f 	bl	1f3c <__sfp>
    1efe:	6060      	str	r0, [r4, #4]
    1f00:	4620      	mov	r0, r4
    1f02:	f000 f81b 	bl	1f3c <__sfp>
    1f06:	60a0      	str	r0, [r4, #8]
    1f08:	4620      	mov	r0, r4
    1f0a:	f000 f817 	bl	1f3c <__sfp>
    1f0e:	2200      	movs	r2, #0
    1f10:	60e0      	str	r0, [r4, #12]
    1f12:	2104      	movs	r1, #4
    1f14:	6860      	ldr	r0, [r4, #4]
    1f16:	f7ff ffa7 	bl	1e68 <std.isra.0>
    1f1a:	2201      	movs	r2, #1
    1f1c:	2109      	movs	r1, #9
    1f1e:	68a0      	ldr	r0, [r4, #8]
    1f20:	f7ff ffa2 	bl	1e68 <std.isra.0>
    1f24:	2202      	movs	r2, #2
    1f26:	2112      	movs	r1, #18
    1f28:	68e0      	ldr	r0, [r4, #12]
    1f2a:	f7ff ff9d 	bl	1e68 <std.isra.0>
    1f2e:	2301      	movs	r3, #1
    1f30:	61a3      	str	r3, [r4, #24]
    1f32:	bd10      	pop	{r4, pc}
    1f34:	000029c0 	.word	0x000029c0
    1f38:	00001e5d 	.word	0x00001e5d

00001f3c <__sfp>:
    1f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3e:	4b1c      	ldr	r3, [pc, #112]	; (1fb0 <__sfp+0x74>)
    1f40:	681e      	ldr	r6, [r3, #0]
    1f42:	69b3      	ldr	r3, [r6, #24]
    1f44:	4607      	mov	r7, r0
    1f46:	b913      	cbnz	r3, 1f4e <__sfp+0x12>
    1f48:	4630      	mov	r0, r6
    1f4a:	f7ff ffc7 	bl	1edc <__sinit>
    1f4e:	3648      	adds	r6, #72	; 0x48
    1f50:	68b4      	ldr	r4, [r6, #8]
    1f52:	6873      	ldr	r3, [r6, #4]
    1f54:	3b01      	subs	r3, #1
    1f56:	d503      	bpl.n	1f60 <__sfp+0x24>
    1f58:	6833      	ldr	r3, [r6, #0]
    1f5a:	b133      	cbz	r3, 1f6a <__sfp+0x2e>
    1f5c:	6836      	ldr	r6, [r6, #0]
    1f5e:	e7f7      	b.n	1f50 <__sfp+0x14>
    1f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1f64:	b16d      	cbz	r5, 1f82 <__sfp+0x46>
    1f66:	3468      	adds	r4, #104	; 0x68
    1f68:	e7f4      	b.n	1f54 <__sfp+0x18>
    1f6a:	2104      	movs	r1, #4
    1f6c:	4638      	mov	r0, r7
    1f6e:	f7ff ff9f 	bl	1eb0 <__sfmoreglue>
    1f72:	6030      	str	r0, [r6, #0]
    1f74:	2800      	cmp	r0, #0
    1f76:	d1f1      	bne.n	1f5c <__sfp+0x20>
    1f78:	230c      	movs	r3, #12
    1f7a:	603b      	str	r3, [r7, #0]
    1f7c:	4604      	mov	r4, r0
    1f7e:	4620      	mov	r0, r4
    1f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1f86:	81e3      	strh	r3, [r4, #14]
    1f88:	2301      	movs	r3, #1
    1f8a:	81a3      	strh	r3, [r4, #12]
    1f8c:	6665      	str	r5, [r4, #100]	; 0x64
    1f8e:	6025      	str	r5, [r4, #0]
    1f90:	60a5      	str	r5, [r4, #8]
    1f92:	6065      	str	r5, [r4, #4]
    1f94:	6125      	str	r5, [r4, #16]
    1f96:	6165      	str	r5, [r4, #20]
    1f98:	61a5      	str	r5, [r4, #24]
    1f9a:	2208      	movs	r2, #8
    1f9c:	4629      	mov	r1, r5
    1f9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1fa2:	f7ff fa5d 	bl	1460 <memset>
    1fa6:	6365      	str	r5, [r4, #52]	; 0x34
    1fa8:	63a5      	str	r5, [r4, #56]	; 0x38
    1faa:	64a5      	str	r5, [r4, #72]	; 0x48
    1fac:	64e5      	str	r5, [r4, #76]	; 0x4c
    1fae:	e7e6      	b.n	1f7e <__sfp+0x42>
    1fb0:	000029c0 	.word	0x000029c0

00001fb4 <_fwalk_reent>:
    1fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fb8:	4680      	mov	r8, r0
    1fba:	4689      	mov	r9, r1
    1fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1fc0:	2600      	movs	r6, #0
    1fc2:	b914      	cbnz	r4, 1fca <_fwalk_reent+0x16>
    1fc4:	4630      	mov	r0, r6
    1fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fca:	68a5      	ldr	r5, [r4, #8]
    1fcc:	6867      	ldr	r7, [r4, #4]
    1fce:	3f01      	subs	r7, #1
    1fd0:	d501      	bpl.n	1fd6 <_fwalk_reent+0x22>
    1fd2:	6824      	ldr	r4, [r4, #0]
    1fd4:	e7f5      	b.n	1fc2 <_fwalk_reent+0xe>
    1fd6:	89ab      	ldrh	r3, [r5, #12]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d907      	bls.n	1fec <_fwalk_reent+0x38>
    1fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1fe0:	3301      	adds	r3, #1
    1fe2:	d003      	beq.n	1fec <_fwalk_reent+0x38>
    1fe4:	4629      	mov	r1, r5
    1fe6:	4640      	mov	r0, r8
    1fe8:	47c8      	blx	r9
    1fea:	4306      	orrs	r6, r0
    1fec:	3568      	adds	r5, #104	; 0x68
    1fee:	e7ee      	b.n	1fce <_fwalk_reent+0x1a>

00001ff0 <__swhatbuf_r>:
    1ff0:	b570      	push	{r4, r5, r6, lr}
    1ff2:	460e      	mov	r6, r1
    1ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1ff8:	2900      	cmp	r1, #0
    1ffa:	b090      	sub	sp, #64	; 0x40
    1ffc:	4614      	mov	r4, r2
    1ffe:	461d      	mov	r5, r3
    2000:	da07      	bge.n	2012 <__swhatbuf_r+0x22>
    2002:	2300      	movs	r3, #0
    2004:	602b      	str	r3, [r5, #0]
    2006:	89b3      	ldrh	r3, [r6, #12]
    2008:	061a      	lsls	r2, r3, #24
    200a:	d410      	bmi.n	202e <__swhatbuf_r+0x3e>
    200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2010:	e00e      	b.n	2030 <__swhatbuf_r+0x40>
    2012:	aa01      	add	r2, sp, #4
    2014:	f000 fb8c 	bl	2730 <_fstat_r>
    2018:	2800      	cmp	r0, #0
    201a:	dbf2      	blt.n	2002 <__swhatbuf_r+0x12>
    201c:	9a02      	ldr	r2, [sp, #8]
    201e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    2022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    2026:	425a      	negs	r2, r3
    2028:	415a      	adcs	r2, r3
    202a:	602a      	str	r2, [r5, #0]
    202c:	e7ee      	b.n	200c <__swhatbuf_r+0x1c>
    202e:	2340      	movs	r3, #64	; 0x40
    2030:	2000      	movs	r0, #0
    2032:	6023      	str	r3, [r4, #0]
    2034:	b010      	add	sp, #64	; 0x40
    2036:	bd70      	pop	{r4, r5, r6, pc}

00002038 <__smakebuf_r>:
    2038:	898b      	ldrh	r3, [r1, #12]
    203a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    203c:	079d      	lsls	r5, r3, #30
    203e:	4606      	mov	r6, r0
    2040:	460c      	mov	r4, r1
    2042:	d507      	bpl.n	2054 <__smakebuf_r+0x1c>
    2044:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2048:	6023      	str	r3, [r4, #0]
    204a:	6123      	str	r3, [r4, #16]
    204c:	2301      	movs	r3, #1
    204e:	6163      	str	r3, [r4, #20]
    2050:	b002      	add	sp, #8
    2052:	bd70      	pop	{r4, r5, r6, pc}
    2054:	ab01      	add	r3, sp, #4
    2056:	466a      	mov	r2, sp
    2058:	f7ff ffca 	bl	1ff0 <__swhatbuf_r>
    205c:	9900      	ldr	r1, [sp, #0]
    205e:	4605      	mov	r5, r0
    2060:	4630      	mov	r0, r6
    2062:	f7ff fa53 	bl	150c <_malloc_r>
    2066:	b948      	cbnz	r0, 207c <__smakebuf_r+0x44>
    2068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    206c:	059a      	lsls	r2, r3, #22
    206e:	d4ef      	bmi.n	2050 <__smakebuf_r+0x18>
    2070:	f023 0303 	bic.w	r3, r3, #3
    2074:	f043 0302 	orr.w	r3, r3, #2
    2078:	81a3      	strh	r3, [r4, #12]
    207a:	e7e3      	b.n	2044 <__smakebuf_r+0xc>
    207c:	4b0d      	ldr	r3, [pc, #52]	; (20b4 <__smakebuf_r+0x7c>)
    207e:	62b3      	str	r3, [r6, #40]	; 0x28
    2080:	89a3      	ldrh	r3, [r4, #12]
    2082:	6020      	str	r0, [r4, #0]
    2084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2088:	81a3      	strh	r3, [r4, #12]
    208a:	9b00      	ldr	r3, [sp, #0]
    208c:	6163      	str	r3, [r4, #20]
    208e:	9b01      	ldr	r3, [sp, #4]
    2090:	6120      	str	r0, [r4, #16]
    2092:	b15b      	cbz	r3, 20ac <__smakebuf_r+0x74>
    2094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2098:	4630      	mov	r0, r6
    209a:	f000 fb5b 	bl	2754 <_isatty_r>
    209e:	b128      	cbz	r0, 20ac <__smakebuf_r+0x74>
    20a0:	89a3      	ldrh	r3, [r4, #12]
    20a2:	f023 0303 	bic.w	r3, r3, #3
    20a6:	f043 0301 	orr.w	r3, r3, #1
    20aa:	81a3      	strh	r3, [r4, #12]
    20ac:	89a3      	ldrh	r3, [r4, #12]
    20ae:	431d      	orrs	r5, r3
    20b0:	81a5      	strh	r5, [r4, #12]
    20b2:	e7cd      	b.n	2050 <__smakebuf_r+0x18>
    20b4:	00001e5d 	.word	0x00001e5d

000020b8 <__malloc_lock>:
    20b8:	4770      	bx	lr

000020ba <__malloc_unlock>:
    20ba:	4770      	bx	lr

000020bc <__sfputc_r>:
    20bc:	6893      	ldr	r3, [r2, #8]
    20be:	3b01      	subs	r3, #1
    20c0:	2b00      	cmp	r3, #0
    20c2:	b410      	push	{r4}
    20c4:	6093      	str	r3, [r2, #8]
    20c6:	da08      	bge.n	20da <__sfputc_r+0x1e>
    20c8:	6994      	ldr	r4, [r2, #24]
    20ca:	42a3      	cmp	r3, r4
    20cc:	db02      	blt.n	20d4 <__sfputc_r+0x18>
    20ce:	b2cb      	uxtb	r3, r1
    20d0:	2b0a      	cmp	r3, #10
    20d2:	d102      	bne.n	20da <__sfputc_r+0x1e>
    20d4:	bc10      	pop	{r4}
    20d6:	f7ff bd4f 	b.w	1b78 <__swbuf_r>
    20da:	6813      	ldr	r3, [r2, #0]
    20dc:	1c58      	adds	r0, r3, #1
    20de:	6010      	str	r0, [r2, #0]
    20e0:	7019      	strb	r1, [r3, #0]
    20e2:	b2c8      	uxtb	r0, r1
    20e4:	bc10      	pop	{r4}
    20e6:	4770      	bx	lr

000020e8 <__sfputs_r>:
    20e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ea:	4606      	mov	r6, r0
    20ec:	460f      	mov	r7, r1
    20ee:	4614      	mov	r4, r2
    20f0:	18d5      	adds	r5, r2, r3
    20f2:	42ac      	cmp	r4, r5
    20f4:	d101      	bne.n	20fa <__sfputs_r+0x12>
    20f6:	2000      	movs	r0, #0
    20f8:	e007      	b.n	210a <__sfputs_r+0x22>
    20fa:	463a      	mov	r2, r7
    20fc:	f814 1b01 	ldrb.w	r1, [r4], #1
    2100:	4630      	mov	r0, r6
    2102:	f7ff ffdb 	bl	20bc <__sfputc_r>
    2106:	1c43      	adds	r3, r0, #1
    2108:	d1f3      	bne.n	20f2 <__sfputs_r+0xa>
    210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000210c <_vfiprintf_r>:
    210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2110:	b09d      	sub	sp, #116	; 0x74
    2112:	460c      	mov	r4, r1
    2114:	4617      	mov	r7, r2
    2116:	9303      	str	r3, [sp, #12]
    2118:	4606      	mov	r6, r0
    211a:	b118      	cbz	r0, 2124 <_vfiprintf_r+0x18>
    211c:	6983      	ldr	r3, [r0, #24]
    211e:	b90b      	cbnz	r3, 2124 <_vfiprintf_r+0x18>
    2120:	f7ff fedc 	bl	1edc <__sinit>
    2124:	4b7c      	ldr	r3, [pc, #496]	; (2318 <_vfiprintf_r+0x20c>)
    2126:	429c      	cmp	r4, r3
    2128:	d157      	bne.n	21da <_vfiprintf_r+0xce>
    212a:	6874      	ldr	r4, [r6, #4]
    212c:	89a3      	ldrh	r3, [r4, #12]
    212e:	0718      	lsls	r0, r3, #28
    2130:	d55d      	bpl.n	21ee <_vfiprintf_r+0xe2>
    2132:	6923      	ldr	r3, [r4, #16]
    2134:	2b00      	cmp	r3, #0
    2136:	d05a      	beq.n	21ee <_vfiprintf_r+0xe2>
    2138:	2300      	movs	r3, #0
    213a:	9309      	str	r3, [sp, #36]	; 0x24
    213c:	2320      	movs	r3, #32
    213e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2142:	2330      	movs	r3, #48	; 0x30
    2144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2148:	f04f 0b01 	mov.w	fp, #1
    214c:	46b8      	mov	r8, r7
    214e:	4645      	mov	r5, r8
    2150:	f815 3b01 	ldrb.w	r3, [r5], #1
    2154:	2b00      	cmp	r3, #0
    2156:	d155      	bne.n	2204 <_vfiprintf_r+0xf8>
    2158:	ebb8 0a07 	subs.w	sl, r8, r7
    215c:	d00b      	beq.n	2176 <_vfiprintf_r+0x6a>
    215e:	4653      	mov	r3, sl
    2160:	463a      	mov	r2, r7
    2162:	4621      	mov	r1, r4
    2164:	4630      	mov	r0, r6
    2166:	f7ff ffbf 	bl	20e8 <__sfputs_r>
    216a:	3001      	adds	r0, #1
    216c:	f000 80c4 	beq.w	22f8 <_vfiprintf_r+0x1ec>
    2170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2172:	4453      	add	r3, sl
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	f898 3000 	ldrb.w	r3, [r8]
    217a:	2b00      	cmp	r3, #0
    217c:	f000 80bc 	beq.w	22f8 <_vfiprintf_r+0x1ec>
    2180:	2300      	movs	r3, #0
    2182:	f04f 32ff 	mov.w	r2, #4294967295
    2186:	9304      	str	r3, [sp, #16]
    2188:	9307      	str	r3, [sp, #28]
    218a:	9205      	str	r2, [sp, #20]
    218c:	9306      	str	r3, [sp, #24]
    218e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2192:	931a      	str	r3, [sp, #104]	; 0x68
    2194:	2205      	movs	r2, #5
    2196:	7829      	ldrb	r1, [r5, #0]
    2198:	4860      	ldr	r0, [pc, #384]	; (231c <_vfiprintf_r+0x210>)
    219a:	f000 fb01 	bl	27a0 <memchr>
    219e:	f105 0801 	add.w	r8, r5, #1
    21a2:	9b04      	ldr	r3, [sp, #16]
    21a4:	2800      	cmp	r0, #0
    21a6:	d131      	bne.n	220c <_vfiprintf_r+0x100>
    21a8:	06d9      	lsls	r1, r3, #27
    21aa:	bf44      	itt	mi
    21ac:	2220      	movmi	r2, #32
    21ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    21b2:	071a      	lsls	r2, r3, #28
    21b4:	bf44      	itt	mi
    21b6:	222b      	movmi	r2, #43	; 0x2b
    21b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    21bc:	782a      	ldrb	r2, [r5, #0]
    21be:	2a2a      	cmp	r2, #42	; 0x2a
    21c0:	d02c      	beq.n	221c <_vfiprintf_r+0x110>
    21c2:	9a07      	ldr	r2, [sp, #28]
    21c4:	2100      	movs	r1, #0
    21c6:	200a      	movs	r0, #10
    21c8:	46a8      	mov	r8, r5
    21ca:	3501      	adds	r5, #1
    21cc:	f898 3000 	ldrb.w	r3, [r8]
    21d0:	3b30      	subs	r3, #48	; 0x30
    21d2:	2b09      	cmp	r3, #9
    21d4:	d96d      	bls.n	22b2 <_vfiprintf_r+0x1a6>
    21d6:	b371      	cbz	r1, 2236 <_vfiprintf_r+0x12a>
    21d8:	e026      	b.n	2228 <_vfiprintf_r+0x11c>
    21da:	4b51      	ldr	r3, [pc, #324]	; (2320 <_vfiprintf_r+0x214>)
    21dc:	429c      	cmp	r4, r3
    21de:	d101      	bne.n	21e4 <_vfiprintf_r+0xd8>
    21e0:	68b4      	ldr	r4, [r6, #8]
    21e2:	e7a3      	b.n	212c <_vfiprintf_r+0x20>
    21e4:	4b4f      	ldr	r3, [pc, #316]	; (2324 <_vfiprintf_r+0x218>)
    21e6:	429c      	cmp	r4, r3
    21e8:	bf08      	it	eq
    21ea:	68f4      	ldreq	r4, [r6, #12]
    21ec:	e79e      	b.n	212c <_vfiprintf_r+0x20>
    21ee:	4621      	mov	r1, r4
    21f0:	4630      	mov	r0, r6
    21f2:	f7ff fd13 	bl	1c1c <__swsetup_r>
    21f6:	2800      	cmp	r0, #0
    21f8:	d09e      	beq.n	2138 <_vfiprintf_r+0x2c>
    21fa:	f04f 30ff 	mov.w	r0, #4294967295
    21fe:	b01d      	add	sp, #116	; 0x74
    2200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2204:	2b25      	cmp	r3, #37	; 0x25
    2206:	d0a7      	beq.n	2158 <_vfiprintf_r+0x4c>
    2208:	46a8      	mov	r8, r5
    220a:	e7a0      	b.n	214e <_vfiprintf_r+0x42>
    220c:	4a43      	ldr	r2, [pc, #268]	; (231c <_vfiprintf_r+0x210>)
    220e:	1a80      	subs	r0, r0, r2
    2210:	fa0b f000 	lsl.w	r0, fp, r0
    2214:	4318      	orrs	r0, r3
    2216:	9004      	str	r0, [sp, #16]
    2218:	4645      	mov	r5, r8
    221a:	e7bb      	b.n	2194 <_vfiprintf_r+0x88>
    221c:	9a03      	ldr	r2, [sp, #12]
    221e:	1d11      	adds	r1, r2, #4
    2220:	6812      	ldr	r2, [r2, #0]
    2222:	9103      	str	r1, [sp, #12]
    2224:	2a00      	cmp	r2, #0
    2226:	db01      	blt.n	222c <_vfiprintf_r+0x120>
    2228:	9207      	str	r2, [sp, #28]
    222a:	e004      	b.n	2236 <_vfiprintf_r+0x12a>
    222c:	4252      	negs	r2, r2
    222e:	f043 0302 	orr.w	r3, r3, #2
    2232:	9207      	str	r2, [sp, #28]
    2234:	9304      	str	r3, [sp, #16]
    2236:	f898 3000 	ldrb.w	r3, [r8]
    223a:	2b2e      	cmp	r3, #46	; 0x2e
    223c:	d110      	bne.n	2260 <_vfiprintf_r+0x154>
    223e:	f898 3001 	ldrb.w	r3, [r8, #1]
    2242:	2b2a      	cmp	r3, #42	; 0x2a
    2244:	f108 0101 	add.w	r1, r8, #1
    2248:	d137      	bne.n	22ba <_vfiprintf_r+0x1ae>
    224a:	9b03      	ldr	r3, [sp, #12]
    224c:	1d1a      	adds	r2, r3, #4
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	9203      	str	r2, [sp, #12]
    2252:	2b00      	cmp	r3, #0
    2254:	bfb8      	it	lt
    2256:	f04f 33ff 	movlt.w	r3, #4294967295
    225a:	f108 0802 	add.w	r8, r8, #2
    225e:	9305      	str	r3, [sp, #20]
    2260:	4d31      	ldr	r5, [pc, #196]	; (2328 <_vfiprintf_r+0x21c>)
    2262:	f898 1000 	ldrb.w	r1, [r8]
    2266:	2203      	movs	r2, #3
    2268:	4628      	mov	r0, r5
    226a:	f000 fa99 	bl	27a0 <memchr>
    226e:	b140      	cbz	r0, 2282 <_vfiprintf_r+0x176>
    2270:	2340      	movs	r3, #64	; 0x40
    2272:	1b40      	subs	r0, r0, r5
    2274:	fa03 f000 	lsl.w	r0, r3, r0
    2278:	9b04      	ldr	r3, [sp, #16]
    227a:	4303      	orrs	r3, r0
    227c:	9304      	str	r3, [sp, #16]
    227e:	f108 0801 	add.w	r8, r8, #1
    2282:	f898 1000 	ldrb.w	r1, [r8]
    2286:	4829      	ldr	r0, [pc, #164]	; (232c <_vfiprintf_r+0x220>)
    2288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    228c:	2206      	movs	r2, #6
    228e:	f108 0701 	add.w	r7, r8, #1
    2292:	f000 fa85 	bl	27a0 <memchr>
    2296:	2800      	cmp	r0, #0
    2298:	d034      	beq.n	2304 <_vfiprintf_r+0x1f8>
    229a:	4b25      	ldr	r3, [pc, #148]	; (2330 <_vfiprintf_r+0x224>)
    229c:	bb03      	cbnz	r3, 22e0 <_vfiprintf_r+0x1d4>
    229e:	9b03      	ldr	r3, [sp, #12]
    22a0:	3307      	adds	r3, #7
    22a2:	f023 0307 	bic.w	r3, r3, #7
    22a6:	3308      	adds	r3, #8
    22a8:	9303      	str	r3, [sp, #12]
    22aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22ac:	444b      	add	r3, r9
    22ae:	9309      	str	r3, [sp, #36]	; 0x24
    22b0:	e74c      	b.n	214c <_vfiprintf_r+0x40>
    22b2:	fb00 3202 	mla	r2, r0, r2, r3
    22b6:	2101      	movs	r1, #1
    22b8:	e786      	b.n	21c8 <_vfiprintf_r+0xbc>
    22ba:	2300      	movs	r3, #0
    22bc:	9305      	str	r3, [sp, #20]
    22be:	4618      	mov	r0, r3
    22c0:	250a      	movs	r5, #10
    22c2:	4688      	mov	r8, r1
    22c4:	3101      	adds	r1, #1
    22c6:	f898 2000 	ldrb.w	r2, [r8]
    22ca:	3a30      	subs	r2, #48	; 0x30
    22cc:	2a09      	cmp	r2, #9
    22ce:	d903      	bls.n	22d8 <_vfiprintf_r+0x1cc>
    22d0:	2b00      	cmp	r3, #0
    22d2:	d0c5      	beq.n	2260 <_vfiprintf_r+0x154>
    22d4:	9005      	str	r0, [sp, #20]
    22d6:	e7c3      	b.n	2260 <_vfiprintf_r+0x154>
    22d8:	fb05 2000 	mla	r0, r5, r0, r2
    22dc:	2301      	movs	r3, #1
    22de:	e7f0      	b.n	22c2 <_vfiprintf_r+0x1b6>
    22e0:	ab03      	add	r3, sp, #12
    22e2:	9300      	str	r3, [sp, #0]
    22e4:	4622      	mov	r2, r4
    22e6:	4b13      	ldr	r3, [pc, #76]	; (2334 <_vfiprintf_r+0x228>)
    22e8:	a904      	add	r1, sp, #16
    22ea:	4630      	mov	r0, r6
    22ec:	f3af 8000 	nop.w
    22f0:	f1b0 3fff 	cmp.w	r0, #4294967295
    22f4:	4681      	mov	r9, r0
    22f6:	d1d8      	bne.n	22aa <_vfiprintf_r+0x19e>
    22f8:	89a3      	ldrh	r3, [r4, #12]
    22fa:	065b      	lsls	r3, r3, #25
    22fc:	f53f af7d 	bmi.w	21fa <_vfiprintf_r+0xee>
    2300:	9809      	ldr	r0, [sp, #36]	; 0x24
    2302:	e77c      	b.n	21fe <_vfiprintf_r+0xf2>
    2304:	ab03      	add	r3, sp, #12
    2306:	9300      	str	r3, [sp, #0]
    2308:	4622      	mov	r2, r4
    230a:	4b0a      	ldr	r3, [pc, #40]	; (2334 <_vfiprintf_r+0x228>)
    230c:	a904      	add	r1, sp, #16
    230e:	4630      	mov	r0, r6
    2310:	f000 f888 	bl	2424 <_printf_i>
    2314:	e7ec      	b.n	22f0 <_vfiprintf_r+0x1e4>
    2316:	bf00      	nop
    2318:	0000307c 	.word	0x0000307c
    231c:	000030bc 	.word	0x000030bc
    2320:	0000309c 	.word	0x0000309c
    2324:	0000305c 	.word	0x0000305c
    2328:	000030c2 	.word	0x000030c2
    232c:	000030c6 	.word	0x000030c6
    2330:	00000000 	.word	0x00000000
    2334:	000020e9 	.word	0x000020e9

00002338 <_printf_common>:
    2338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    233c:	4691      	mov	r9, r2
    233e:	461f      	mov	r7, r3
    2340:	688a      	ldr	r2, [r1, #8]
    2342:	690b      	ldr	r3, [r1, #16]
    2344:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2348:	4293      	cmp	r3, r2
    234a:	bfb8      	it	lt
    234c:	4613      	movlt	r3, r2
    234e:	f8c9 3000 	str.w	r3, [r9]
    2352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2356:	4606      	mov	r6, r0
    2358:	460c      	mov	r4, r1
    235a:	b112      	cbz	r2, 2362 <_printf_common+0x2a>
    235c:	3301      	adds	r3, #1
    235e:	f8c9 3000 	str.w	r3, [r9]
    2362:	6823      	ldr	r3, [r4, #0]
    2364:	0699      	lsls	r1, r3, #26
    2366:	bf42      	ittt	mi
    2368:	f8d9 3000 	ldrmi.w	r3, [r9]
    236c:	3302      	addmi	r3, #2
    236e:	f8c9 3000 	strmi.w	r3, [r9]
    2372:	6825      	ldr	r5, [r4, #0]
    2374:	f015 0506 	ands.w	r5, r5, #6
    2378:	d107      	bne.n	238a <_printf_common+0x52>
    237a:	f104 0a19 	add.w	sl, r4, #25
    237e:	68e3      	ldr	r3, [r4, #12]
    2380:	f8d9 2000 	ldr.w	r2, [r9]
    2384:	1a9b      	subs	r3, r3, r2
    2386:	429d      	cmp	r5, r3
    2388:	db29      	blt.n	23de <_printf_common+0xa6>
    238a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    238e:	6822      	ldr	r2, [r4, #0]
    2390:	3300      	adds	r3, #0
    2392:	bf18      	it	ne
    2394:	2301      	movne	r3, #1
    2396:	0692      	lsls	r2, r2, #26
    2398:	d42e      	bmi.n	23f8 <_printf_common+0xc0>
    239a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    239e:	4639      	mov	r1, r7
    23a0:	4630      	mov	r0, r6
    23a2:	47c0      	blx	r8
    23a4:	3001      	adds	r0, #1
    23a6:	d021      	beq.n	23ec <_printf_common+0xb4>
    23a8:	6823      	ldr	r3, [r4, #0]
    23aa:	68e5      	ldr	r5, [r4, #12]
    23ac:	f8d9 2000 	ldr.w	r2, [r9]
    23b0:	f003 0306 	and.w	r3, r3, #6
    23b4:	2b04      	cmp	r3, #4
    23b6:	bf08      	it	eq
    23b8:	1aad      	subeq	r5, r5, r2
    23ba:	68a3      	ldr	r3, [r4, #8]
    23bc:	6922      	ldr	r2, [r4, #16]
    23be:	bf0c      	ite	eq
    23c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    23c4:	2500      	movne	r5, #0
    23c6:	4293      	cmp	r3, r2
    23c8:	bfc4      	itt	gt
    23ca:	1a9b      	subgt	r3, r3, r2
    23cc:	18ed      	addgt	r5, r5, r3
    23ce:	f04f 0900 	mov.w	r9, #0
    23d2:	341a      	adds	r4, #26
    23d4:	454d      	cmp	r5, r9
    23d6:	d11b      	bne.n	2410 <_printf_common+0xd8>
    23d8:	2000      	movs	r0, #0
    23da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23de:	2301      	movs	r3, #1
    23e0:	4652      	mov	r2, sl
    23e2:	4639      	mov	r1, r7
    23e4:	4630      	mov	r0, r6
    23e6:	47c0      	blx	r8
    23e8:	3001      	adds	r0, #1
    23ea:	d103      	bne.n	23f4 <_printf_common+0xbc>
    23ec:	f04f 30ff 	mov.w	r0, #4294967295
    23f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23f4:	3501      	adds	r5, #1
    23f6:	e7c2      	b.n	237e <_printf_common+0x46>
    23f8:	18e1      	adds	r1, r4, r3
    23fa:	1c5a      	adds	r2, r3, #1
    23fc:	2030      	movs	r0, #48	; 0x30
    23fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2402:	4422      	add	r2, r4
    2404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    240c:	3302      	adds	r3, #2
    240e:	e7c4      	b.n	239a <_printf_common+0x62>
    2410:	2301      	movs	r3, #1
    2412:	4622      	mov	r2, r4
    2414:	4639      	mov	r1, r7
    2416:	4630      	mov	r0, r6
    2418:	47c0      	blx	r8
    241a:	3001      	adds	r0, #1
    241c:	d0e6      	beq.n	23ec <_printf_common+0xb4>
    241e:	f109 0901 	add.w	r9, r9, #1
    2422:	e7d7      	b.n	23d4 <_printf_common+0x9c>

00002424 <_printf_i>:
    2424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2428:	4617      	mov	r7, r2
    242a:	7e0a      	ldrb	r2, [r1, #24]
    242c:	b085      	sub	sp, #20
    242e:	2a6e      	cmp	r2, #110	; 0x6e
    2430:	4698      	mov	r8, r3
    2432:	4606      	mov	r6, r0
    2434:	460c      	mov	r4, r1
    2436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2438:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    243c:	f000 80bc 	beq.w	25b8 <_printf_i+0x194>
    2440:	d81a      	bhi.n	2478 <_printf_i+0x54>
    2442:	2a63      	cmp	r2, #99	; 0x63
    2444:	d02e      	beq.n	24a4 <_printf_i+0x80>
    2446:	d80a      	bhi.n	245e <_printf_i+0x3a>
    2448:	2a00      	cmp	r2, #0
    244a:	f000 80c8 	beq.w	25de <_printf_i+0x1ba>
    244e:	2a58      	cmp	r2, #88	; 0x58
    2450:	f000 808a 	beq.w	2568 <_printf_i+0x144>
    2454:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2458:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    245c:	e02a      	b.n	24b4 <_printf_i+0x90>
    245e:	2a64      	cmp	r2, #100	; 0x64
    2460:	d001      	beq.n	2466 <_printf_i+0x42>
    2462:	2a69      	cmp	r2, #105	; 0x69
    2464:	d1f6      	bne.n	2454 <_printf_i+0x30>
    2466:	6821      	ldr	r1, [r4, #0]
    2468:	681a      	ldr	r2, [r3, #0]
    246a:	f011 0f80 	tst.w	r1, #128	; 0x80
    246e:	d023      	beq.n	24b8 <_printf_i+0x94>
    2470:	1d11      	adds	r1, r2, #4
    2472:	6019      	str	r1, [r3, #0]
    2474:	6813      	ldr	r3, [r2, #0]
    2476:	e027      	b.n	24c8 <_printf_i+0xa4>
    2478:	2a73      	cmp	r2, #115	; 0x73
    247a:	f000 80b4 	beq.w	25e6 <_printf_i+0x1c2>
    247e:	d808      	bhi.n	2492 <_printf_i+0x6e>
    2480:	2a6f      	cmp	r2, #111	; 0x6f
    2482:	d02a      	beq.n	24da <_printf_i+0xb6>
    2484:	2a70      	cmp	r2, #112	; 0x70
    2486:	d1e5      	bne.n	2454 <_printf_i+0x30>
    2488:	680a      	ldr	r2, [r1, #0]
    248a:	f042 0220 	orr.w	r2, r2, #32
    248e:	600a      	str	r2, [r1, #0]
    2490:	e003      	b.n	249a <_printf_i+0x76>
    2492:	2a75      	cmp	r2, #117	; 0x75
    2494:	d021      	beq.n	24da <_printf_i+0xb6>
    2496:	2a78      	cmp	r2, #120	; 0x78
    2498:	d1dc      	bne.n	2454 <_printf_i+0x30>
    249a:	2278      	movs	r2, #120	; 0x78
    249c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    24a0:	496e      	ldr	r1, [pc, #440]	; (265c <_printf_i+0x238>)
    24a2:	e064      	b.n	256e <_printf_i+0x14a>
    24a4:	681a      	ldr	r2, [r3, #0]
    24a6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    24aa:	1d11      	adds	r1, r2, #4
    24ac:	6019      	str	r1, [r3, #0]
    24ae:	6813      	ldr	r3, [r2, #0]
    24b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    24b4:	2301      	movs	r3, #1
    24b6:	e0a3      	b.n	2600 <_printf_i+0x1dc>
    24b8:	f011 0f40 	tst.w	r1, #64	; 0x40
    24bc:	f102 0104 	add.w	r1, r2, #4
    24c0:	6019      	str	r1, [r3, #0]
    24c2:	d0d7      	beq.n	2474 <_printf_i+0x50>
    24c4:	f9b2 3000 	ldrsh.w	r3, [r2]
    24c8:	2b00      	cmp	r3, #0
    24ca:	da03      	bge.n	24d4 <_printf_i+0xb0>
    24cc:	222d      	movs	r2, #45	; 0x2d
    24ce:	425b      	negs	r3, r3
    24d0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    24d4:	4962      	ldr	r1, [pc, #392]	; (2660 <_printf_i+0x23c>)
    24d6:	220a      	movs	r2, #10
    24d8:	e017      	b.n	250a <_printf_i+0xe6>
    24da:	6820      	ldr	r0, [r4, #0]
    24dc:	6819      	ldr	r1, [r3, #0]
    24de:	f010 0f80 	tst.w	r0, #128	; 0x80
    24e2:	d003      	beq.n	24ec <_printf_i+0xc8>
    24e4:	1d08      	adds	r0, r1, #4
    24e6:	6018      	str	r0, [r3, #0]
    24e8:	680b      	ldr	r3, [r1, #0]
    24ea:	e006      	b.n	24fa <_printf_i+0xd6>
    24ec:	f010 0f40 	tst.w	r0, #64	; 0x40
    24f0:	f101 0004 	add.w	r0, r1, #4
    24f4:	6018      	str	r0, [r3, #0]
    24f6:	d0f7      	beq.n	24e8 <_printf_i+0xc4>
    24f8:	880b      	ldrh	r3, [r1, #0]
    24fa:	4959      	ldr	r1, [pc, #356]	; (2660 <_printf_i+0x23c>)
    24fc:	2a6f      	cmp	r2, #111	; 0x6f
    24fe:	bf14      	ite	ne
    2500:	220a      	movne	r2, #10
    2502:	2208      	moveq	r2, #8
    2504:	2000      	movs	r0, #0
    2506:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    250a:	6865      	ldr	r5, [r4, #4]
    250c:	60a5      	str	r5, [r4, #8]
    250e:	2d00      	cmp	r5, #0
    2510:	f2c0 809c 	blt.w	264c <_printf_i+0x228>
    2514:	6820      	ldr	r0, [r4, #0]
    2516:	f020 0004 	bic.w	r0, r0, #4
    251a:	6020      	str	r0, [r4, #0]
    251c:	2b00      	cmp	r3, #0
    251e:	d13f      	bne.n	25a0 <_printf_i+0x17c>
    2520:	2d00      	cmp	r5, #0
    2522:	f040 8095 	bne.w	2650 <_printf_i+0x22c>
    2526:	4675      	mov	r5, lr
    2528:	2a08      	cmp	r2, #8
    252a:	d10b      	bne.n	2544 <_printf_i+0x120>
    252c:	6823      	ldr	r3, [r4, #0]
    252e:	07da      	lsls	r2, r3, #31
    2530:	d508      	bpl.n	2544 <_printf_i+0x120>
    2532:	6923      	ldr	r3, [r4, #16]
    2534:	6862      	ldr	r2, [r4, #4]
    2536:	429a      	cmp	r2, r3
    2538:	bfde      	ittt	le
    253a:	2330      	movle	r3, #48	; 0x30
    253c:	f805 3c01 	strble.w	r3, [r5, #-1]
    2540:	f105 35ff 	addle.w	r5, r5, #4294967295
    2544:	ebae 0305 	sub.w	r3, lr, r5
    2548:	6123      	str	r3, [r4, #16]
    254a:	f8cd 8000 	str.w	r8, [sp]
    254e:	463b      	mov	r3, r7
    2550:	aa03      	add	r2, sp, #12
    2552:	4621      	mov	r1, r4
    2554:	4630      	mov	r0, r6
    2556:	f7ff feef 	bl	2338 <_printf_common>
    255a:	3001      	adds	r0, #1
    255c:	d155      	bne.n	260a <_printf_i+0x1e6>
    255e:	f04f 30ff 	mov.w	r0, #4294967295
    2562:	b005      	add	sp, #20
    2564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2568:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    256c:	493c      	ldr	r1, [pc, #240]	; (2660 <_printf_i+0x23c>)
    256e:	6822      	ldr	r2, [r4, #0]
    2570:	6818      	ldr	r0, [r3, #0]
    2572:	f012 0f80 	tst.w	r2, #128	; 0x80
    2576:	f100 0504 	add.w	r5, r0, #4
    257a:	601d      	str	r5, [r3, #0]
    257c:	d001      	beq.n	2582 <_printf_i+0x15e>
    257e:	6803      	ldr	r3, [r0, #0]
    2580:	e002      	b.n	2588 <_printf_i+0x164>
    2582:	0655      	lsls	r5, r2, #25
    2584:	d5fb      	bpl.n	257e <_printf_i+0x15a>
    2586:	8803      	ldrh	r3, [r0, #0]
    2588:	07d0      	lsls	r0, r2, #31
    258a:	bf44      	itt	mi
    258c:	f042 0220 	orrmi.w	r2, r2, #32
    2590:	6022      	strmi	r2, [r4, #0]
    2592:	b91b      	cbnz	r3, 259c <_printf_i+0x178>
    2594:	6822      	ldr	r2, [r4, #0]
    2596:	f022 0220 	bic.w	r2, r2, #32
    259a:	6022      	str	r2, [r4, #0]
    259c:	2210      	movs	r2, #16
    259e:	e7b1      	b.n	2504 <_printf_i+0xe0>
    25a0:	4675      	mov	r5, lr
    25a2:	fbb3 f0f2 	udiv	r0, r3, r2
    25a6:	fb02 3310 	mls	r3, r2, r0, r3
    25aa:	5ccb      	ldrb	r3, [r1, r3]
    25ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
    25b0:	4603      	mov	r3, r0
    25b2:	2800      	cmp	r0, #0
    25b4:	d1f5      	bne.n	25a2 <_printf_i+0x17e>
    25b6:	e7b7      	b.n	2528 <_printf_i+0x104>
    25b8:	6808      	ldr	r0, [r1, #0]
    25ba:	681a      	ldr	r2, [r3, #0]
    25bc:	6949      	ldr	r1, [r1, #20]
    25be:	f010 0f80 	tst.w	r0, #128	; 0x80
    25c2:	d004      	beq.n	25ce <_printf_i+0x1aa>
    25c4:	1d10      	adds	r0, r2, #4
    25c6:	6018      	str	r0, [r3, #0]
    25c8:	6813      	ldr	r3, [r2, #0]
    25ca:	6019      	str	r1, [r3, #0]
    25cc:	e007      	b.n	25de <_printf_i+0x1ba>
    25ce:	f010 0f40 	tst.w	r0, #64	; 0x40
    25d2:	f102 0004 	add.w	r0, r2, #4
    25d6:	6018      	str	r0, [r3, #0]
    25d8:	6813      	ldr	r3, [r2, #0]
    25da:	d0f6      	beq.n	25ca <_printf_i+0x1a6>
    25dc:	8019      	strh	r1, [r3, #0]
    25de:	2300      	movs	r3, #0
    25e0:	6123      	str	r3, [r4, #16]
    25e2:	4675      	mov	r5, lr
    25e4:	e7b1      	b.n	254a <_printf_i+0x126>
    25e6:	681a      	ldr	r2, [r3, #0]
    25e8:	1d11      	adds	r1, r2, #4
    25ea:	6019      	str	r1, [r3, #0]
    25ec:	6815      	ldr	r5, [r2, #0]
    25ee:	6862      	ldr	r2, [r4, #4]
    25f0:	2100      	movs	r1, #0
    25f2:	4628      	mov	r0, r5
    25f4:	f000 f8d4 	bl	27a0 <memchr>
    25f8:	b108      	cbz	r0, 25fe <_printf_i+0x1da>
    25fa:	1b40      	subs	r0, r0, r5
    25fc:	6060      	str	r0, [r4, #4]
    25fe:	6863      	ldr	r3, [r4, #4]
    2600:	6123      	str	r3, [r4, #16]
    2602:	2300      	movs	r3, #0
    2604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2608:	e79f      	b.n	254a <_printf_i+0x126>
    260a:	6923      	ldr	r3, [r4, #16]
    260c:	462a      	mov	r2, r5
    260e:	4639      	mov	r1, r7
    2610:	4630      	mov	r0, r6
    2612:	47c0      	blx	r8
    2614:	3001      	adds	r0, #1
    2616:	d0a2      	beq.n	255e <_printf_i+0x13a>
    2618:	6823      	ldr	r3, [r4, #0]
    261a:	079b      	lsls	r3, r3, #30
    261c:	d507      	bpl.n	262e <_printf_i+0x20a>
    261e:	2500      	movs	r5, #0
    2620:	f104 0919 	add.w	r9, r4, #25
    2624:	68e3      	ldr	r3, [r4, #12]
    2626:	9a03      	ldr	r2, [sp, #12]
    2628:	1a9b      	subs	r3, r3, r2
    262a:	429d      	cmp	r5, r3
    262c:	db05      	blt.n	263a <_printf_i+0x216>
    262e:	68e0      	ldr	r0, [r4, #12]
    2630:	9b03      	ldr	r3, [sp, #12]
    2632:	4298      	cmp	r0, r3
    2634:	bfb8      	it	lt
    2636:	4618      	movlt	r0, r3
    2638:	e793      	b.n	2562 <_printf_i+0x13e>
    263a:	2301      	movs	r3, #1
    263c:	464a      	mov	r2, r9
    263e:	4639      	mov	r1, r7
    2640:	4630      	mov	r0, r6
    2642:	47c0      	blx	r8
    2644:	3001      	adds	r0, #1
    2646:	d08a      	beq.n	255e <_printf_i+0x13a>
    2648:	3501      	adds	r5, #1
    264a:	e7eb      	b.n	2624 <_printf_i+0x200>
    264c:	2b00      	cmp	r3, #0
    264e:	d1a7      	bne.n	25a0 <_printf_i+0x17c>
    2650:	780b      	ldrb	r3, [r1, #0]
    2652:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2656:	f104 0542 	add.w	r5, r4, #66	; 0x42
    265a:	e765      	b.n	2528 <_printf_i+0x104>
    265c:	000030de 	.word	0x000030de
    2660:	000030cd 	.word	0x000030cd

00002664 <__sread>:
    2664:	b510      	push	{r4, lr}
    2666:	460c      	mov	r4, r1
    2668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    266c:	f000 f8e8 	bl	2840 <_read_r>
    2670:	2800      	cmp	r0, #0
    2672:	bfab      	itete	ge
    2674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2676:	89a3      	ldrhlt	r3, [r4, #12]
    2678:	181b      	addge	r3, r3, r0
    267a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    267e:	bfac      	ite	ge
    2680:	6563      	strge	r3, [r4, #84]	; 0x54
    2682:	81a3      	strhlt	r3, [r4, #12]
    2684:	bd10      	pop	{r4, pc}

00002686 <__swrite>:
    2686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    268a:	461f      	mov	r7, r3
    268c:	898b      	ldrh	r3, [r1, #12]
    268e:	05db      	lsls	r3, r3, #23
    2690:	4605      	mov	r5, r0
    2692:	460c      	mov	r4, r1
    2694:	4616      	mov	r6, r2
    2696:	d505      	bpl.n	26a4 <__swrite+0x1e>
    2698:	2302      	movs	r3, #2
    269a:	2200      	movs	r2, #0
    269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    26a0:	f000 f868 	bl	2774 <_lseek_r>
    26a4:	89a3      	ldrh	r3, [r4, #12]
    26a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    26aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    26ae:	81a3      	strh	r3, [r4, #12]
    26b0:	4632      	mov	r2, r6
    26b2:	463b      	mov	r3, r7
    26b4:	4628      	mov	r0, r5
    26b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    26ba:	f000 b817 	b.w	26ec <_write_r>

000026be <__sseek>:
    26be:	b510      	push	{r4, lr}
    26c0:	460c      	mov	r4, r1
    26c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    26c6:	f000 f855 	bl	2774 <_lseek_r>
    26ca:	1c43      	adds	r3, r0, #1
    26cc:	89a3      	ldrh	r3, [r4, #12]
    26ce:	bf15      	itete	ne
    26d0:	6560      	strne	r0, [r4, #84]	; 0x54
    26d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    26d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    26da:	81a3      	strheq	r3, [r4, #12]
    26dc:	bf18      	it	ne
    26de:	81a3      	strhne	r3, [r4, #12]
    26e0:	bd10      	pop	{r4, pc}

000026e2 <__sclose>:
    26e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    26e6:	f000 b813 	b.w	2710 <_close_r>
	...

000026ec <_write_r>:
    26ec:	b538      	push	{r3, r4, r5, lr}
    26ee:	4c07      	ldr	r4, [pc, #28]	; (270c <_write_r+0x20>)
    26f0:	4605      	mov	r5, r0
    26f2:	4608      	mov	r0, r1
    26f4:	4611      	mov	r1, r2
    26f6:	2200      	movs	r2, #0
    26f8:	6022      	str	r2, [r4, #0]
    26fa:	461a      	mov	r2, r3
    26fc:	f7fe fe20 	bl	1340 <_write>
    2700:	1c43      	adds	r3, r0, #1
    2702:	d102      	bne.n	270a <_write_r+0x1e>
    2704:	6823      	ldr	r3, [r4, #0]
    2706:	b103      	cbz	r3, 270a <_write_r+0x1e>
    2708:	602b      	str	r3, [r5, #0]
    270a:	bd38      	pop	{r3, r4, r5, pc}
    270c:	20000670 	.word	0x20000670

00002710 <_close_r>:
    2710:	b538      	push	{r3, r4, r5, lr}
    2712:	4c06      	ldr	r4, [pc, #24]	; (272c <_close_r+0x1c>)
    2714:	2300      	movs	r3, #0
    2716:	4605      	mov	r5, r0
    2718:	4608      	mov	r0, r1
    271a:	6023      	str	r3, [r4, #0]
    271c:	f7fe f9f4 	bl	b08 <_close>
    2720:	1c43      	adds	r3, r0, #1
    2722:	d102      	bne.n	272a <_close_r+0x1a>
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	b103      	cbz	r3, 272a <_close_r+0x1a>
    2728:	602b      	str	r3, [r5, #0]
    272a:	bd38      	pop	{r3, r4, r5, pc}
    272c:	20000670 	.word	0x20000670

00002730 <_fstat_r>:
    2730:	b538      	push	{r3, r4, r5, lr}
    2732:	4c07      	ldr	r4, [pc, #28]	; (2750 <_fstat_r+0x20>)
    2734:	2300      	movs	r3, #0
    2736:	4605      	mov	r5, r0
    2738:	4608      	mov	r0, r1
    273a:	4611      	mov	r1, r2
    273c:	6023      	str	r3, [r4, #0]
    273e:	f7fe f9e6 	bl	b0e <_fstat>
    2742:	1c43      	adds	r3, r0, #1
    2744:	d102      	bne.n	274c <_fstat_r+0x1c>
    2746:	6823      	ldr	r3, [r4, #0]
    2748:	b103      	cbz	r3, 274c <_fstat_r+0x1c>
    274a:	602b      	str	r3, [r5, #0]
    274c:	bd38      	pop	{r3, r4, r5, pc}
    274e:	bf00      	nop
    2750:	20000670 	.word	0x20000670

00002754 <_isatty_r>:
    2754:	b538      	push	{r3, r4, r5, lr}
    2756:	4c06      	ldr	r4, [pc, #24]	; (2770 <_isatty_r+0x1c>)
    2758:	2300      	movs	r3, #0
    275a:	4605      	mov	r5, r0
    275c:	4608      	mov	r0, r1
    275e:	6023      	str	r3, [r4, #0]
    2760:	f7fe f9da 	bl	b18 <_isatty>
    2764:	1c43      	adds	r3, r0, #1
    2766:	d102      	bne.n	276e <_isatty_r+0x1a>
    2768:	6823      	ldr	r3, [r4, #0]
    276a:	b103      	cbz	r3, 276e <_isatty_r+0x1a>
    276c:	602b      	str	r3, [r5, #0]
    276e:	bd38      	pop	{r3, r4, r5, pc}
    2770:	20000670 	.word	0x20000670

00002774 <_lseek_r>:
    2774:	b538      	push	{r3, r4, r5, lr}
    2776:	4c07      	ldr	r4, [pc, #28]	; (2794 <_lseek_r+0x20>)
    2778:	4605      	mov	r5, r0
    277a:	4608      	mov	r0, r1
    277c:	4611      	mov	r1, r2
    277e:	2200      	movs	r2, #0
    2780:	6022      	str	r2, [r4, #0]
    2782:	461a      	mov	r2, r3
    2784:	f7fe f9ca 	bl	b1c <_lseek>
    2788:	1c43      	adds	r3, r0, #1
    278a:	d102      	bne.n	2792 <_lseek_r+0x1e>
    278c:	6823      	ldr	r3, [r4, #0]
    278e:	b103      	cbz	r3, 2792 <_lseek_r+0x1e>
    2790:	602b      	str	r3, [r5, #0]
    2792:	bd38      	pop	{r3, r4, r5, pc}
    2794:	20000670 	.word	0x20000670
	...

000027a0 <memchr>:
    27a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    27a4:	2a10      	cmp	r2, #16
    27a6:	db2b      	blt.n	2800 <memchr+0x60>
    27a8:	f010 0f07 	tst.w	r0, #7
    27ac:	d008      	beq.n	27c0 <memchr+0x20>
    27ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    27b2:	3a01      	subs	r2, #1
    27b4:	428b      	cmp	r3, r1
    27b6:	d02d      	beq.n	2814 <memchr+0x74>
    27b8:	f010 0f07 	tst.w	r0, #7
    27bc:	b342      	cbz	r2, 2810 <memchr+0x70>
    27be:	d1f6      	bne.n	27ae <memchr+0xe>
    27c0:	b4f0      	push	{r4, r5, r6, r7}
    27c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    27c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    27ca:	f022 0407 	bic.w	r4, r2, #7
    27ce:	f07f 0700 	mvns.w	r7, #0
    27d2:	2300      	movs	r3, #0
    27d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    27d8:	3c08      	subs	r4, #8
    27da:	ea85 0501 	eor.w	r5, r5, r1
    27de:	ea86 0601 	eor.w	r6, r6, r1
    27e2:	fa85 f547 	uadd8	r5, r5, r7
    27e6:	faa3 f587 	sel	r5, r3, r7
    27ea:	fa86 f647 	uadd8	r6, r6, r7
    27ee:	faa5 f687 	sel	r6, r5, r7
    27f2:	b98e      	cbnz	r6, 2818 <memchr+0x78>
    27f4:	d1ee      	bne.n	27d4 <memchr+0x34>
    27f6:	bcf0      	pop	{r4, r5, r6, r7}
    27f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    27fc:	f002 0207 	and.w	r2, r2, #7
    2800:	b132      	cbz	r2, 2810 <memchr+0x70>
    2802:	f810 3b01 	ldrb.w	r3, [r0], #1
    2806:	3a01      	subs	r2, #1
    2808:	ea83 0301 	eor.w	r3, r3, r1
    280c:	b113      	cbz	r3, 2814 <memchr+0x74>
    280e:	d1f8      	bne.n	2802 <memchr+0x62>
    2810:	2000      	movs	r0, #0
    2812:	4770      	bx	lr
    2814:	3801      	subs	r0, #1
    2816:	4770      	bx	lr
    2818:	2d00      	cmp	r5, #0
    281a:	bf06      	itte	eq
    281c:	4635      	moveq	r5, r6
    281e:	3803      	subeq	r0, #3
    2820:	3807      	subne	r0, #7
    2822:	f015 0f01 	tst.w	r5, #1
    2826:	d107      	bne.n	2838 <memchr+0x98>
    2828:	3001      	adds	r0, #1
    282a:	f415 7f80 	tst.w	r5, #256	; 0x100
    282e:	bf02      	ittt	eq
    2830:	3001      	addeq	r0, #1
    2832:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    2836:	3001      	addeq	r0, #1
    2838:	bcf0      	pop	{r4, r5, r6, r7}
    283a:	3801      	subs	r0, #1
    283c:	4770      	bx	lr
    283e:	bf00      	nop

00002840 <_read_r>:
    2840:	b538      	push	{r3, r4, r5, lr}
    2842:	4c07      	ldr	r4, [pc, #28]	; (2860 <_read_r+0x20>)
    2844:	4605      	mov	r5, r0
    2846:	4608      	mov	r0, r1
    2848:	4611      	mov	r1, r2
    284a:	2200      	movs	r2, #0
    284c:	6022      	str	r2, [r4, #0]
    284e:	461a      	mov	r2, r3
    2850:	f7fe fd64 	bl	131c <_read>
    2854:	1c43      	adds	r3, r0, #1
    2856:	d102      	bne.n	285e <_read_r+0x1e>
    2858:	6823      	ldr	r3, [r4, #0]
    285a:	b103      	cbz	r3, 285e <_read_r+0x1e>
    285c:	602b      	str	r3, [r5, #0]
    285e:	bd38      	pop	{r3, r4, r5, pc}
    2860:	20000670 	.word	0x20000670
    2864:	5f616d64 	.word	0x5f616d64
    2868:	736d656d 	.word	0x736d656d
    286c:	29287465 	.word	0x29287465
    2870:	69616620 	.word	0x69616620
    2874:	3a64656c 	.word	0x3a64656c
    2878:	0a732520 	.word	0x0a732520
    287c:	00000000 	.word	0x00000000
    2880:	5f616d64 	.word	0x5f616d64
    2884:	6f6d656d 	.word	0x6f6d656d
    2888:	695f7972 	.word	0x695f7972
    288c:	2874696e 	.word	0x2874696e
    2890:	61662029 	.word	0x61662029
    2894:	64656c69 	.word	0x64656c69
    2898:	7325203a 	.word	0x7325203a
    289c:	0000000a 	.word	0x0000000a
    28a0:	6c6c6568 	.word	0x6c6c6568
    28a4:	6f77206f 	.word	0x6f77206f
    28a8:	21646c72 	.word	0x21646c72
    28ac:	00000000 	.word	0x00000000
    28b0:	5f616d64 	.word	0x5f616d64
    28b4:	636d656d 	.word	0x636d656d
    28b8:	29287970 	.word	0x29287970
    28bc:	69616620 	.word	0x69616620
    28c0:	3a64656c 	.word	0x3a64656c
    28c4:	0a732520 	.word	0x0a732520
    28c8:	00000000 	.word	0x00000000
    28cc:	682f2e2e 	.word	0x682f2e2e
    28d0:	732f6c61 	.word	0x732f6c61
    28d4:	682f6372 	.word	0x682f6372
    28d8:	695f6c61 	.word	0x695f6c61
    28dc:	00632e6f 	.word	0x00632e6f
    28e0:	682f2e2e 	.word	0x682f2e2e
    28e4:	732f6c61 	.word	0x732f6c61
    28e8:	682f6372 	.word	0x682f6372
    28ec:	735f6c61 	.word	0x735f6c61
    28f0:	6d5f6970 	.word	0x6d5f6970
    28f4:	6e79735f 	.word	0x6e79735f
    28f8:	00632e63 	.word	0x00632e63
    28fc:	682f2e2e 	.word	0x682f2e2e
    2900:	732f6c61 	.word	0x732f6c61
    2904:	682f6372 	.word	0x682f6372
    2908:	755f6c61 	.word	0x755f6c61
    290c:	74726173 	.word	0x74726173
    2910:	6e79735f 	.word	0x6e79735f
    2914:	00632e63 	.word	0x00632e63
    2918:	40003000 	.word	0x40003000
    291c:	40003400 	.word	0x40003400
    2920:	41012000 	.word	0x41012000
    2924:	41014000 	.word	0x41014000
    2928:	43000000 	.word	0x43000000
    292c:	43000400 	.word	0x43000400
    2930:	43000800 	.word	0x43000800
    2934:	43000c00 	.word	0x43000c00

00002938 <_usarts>:
    2938:	00000000 40100004 00030000 00700002     .......@......p.
    2948:	0000f62b 00000000 00000007 40100004     +..............@
    2958:	00030000 00700002 0000f62b 00000000     ......p.+.......

00002968 <_i2cms>:
	...

00002980 <_i2css>:
	...

00002990 <sercomspi_regs>:
    2990:	0020000c 00020000 00000000 01ff00fe     .. .............
    29a0:	00000001 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    29b0:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000029c0 <_global_impure_ptr>:
    29c0:	20000004 63637553 00737365 20746f4e     ... Success.Not 
    29d0:	656e776f 6f4e0072 63757320 69662068     owner.No such fi
    29e0:	6f20656c 69642072 74636572 0079726f     le or directory.
    29f0:	73206f4e 20686375 636f7270 00737365     No such process.
    2a00:	65746e49 70757272 20646574 74737973     Interrupted syst
    2a10:	63206d65 006c6c61 204f2f49 6f727265     em call.I/O erro
    2a20:	6f4e0072 63757320 65642068 65636976     r.No such device
    2a30:	20726f20 72646461 00737365 20677241      or address.Arg 
    2a40:	7473696c 6f6f7420 6e6f6c20 78450067     list too long.Ex
    2a50:	66206365 616d726f 72652074 00726f72     ec format error.
    2a60:	6b636f53 61207465 6165726c 63207964     Socket already c
    2a70:	656e6e6f 64657463 64614200 6c696620     onnected.Bad fil
    2a80:	756e2065 7265626d 206f4e00 6c696863     e number.No chil
    2a90:	6e657264 73654400 616e6974 6e6f6974     dren.Destination
    2aa0:	64646120 73736572 71657220 65726975      address require
    2ab0:	6f4e0064 726f6d20 72702065 7365636f     d.No more proces
    2ac0:	00736573 20746f4e 756f6e65 73206867     ses.Not enough s
    2ad0:	65636170 72655000 7373696d 206e6f69     pace.Permission 
    2ae0:	696e6564 42006465 61206461 65726464     denied.Bad addre
    2af0:	44007373 63697665 726f2065 73657220     ss.Device or res
    2b00:	6372756f 75622065 46007973 20656c69     ource busy.File 
    2b10:	73697865 43007374 73736f72 7665642d     exists.Cross-dev
    2b20:	20656369 6b6e696c 206f4e00 68637573     ice link.No such
    2b30:	76656420 00656369 20746f4e 69642061      device.Not a di
    2b40:	74636572 0079726f 74736f48 20736920     rectory.Host is 
    2b50:	6e776f64 6e6f4300 7463656e 206e6f69     down.Connection 
    2b60:	65726c61 20796461 70206e69 72676f72     already in progr
    2b70:	00737365 61207349 72696420 6f746365     ess.Is a directo
    2b80:	49007972 6c61766e 61206469 6d756772     ry.Invalid argum
    2b90:	00746e65 7774654e 206b726f 65746e69     ent.Network inte
    2ba0:	63616672 73692065 746f6e20 6e6f6320     rface is not con
    2bb0:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
    2bc0:	61206e6f 74726f62 62206465 656e2079     on aborted by ne
    2bd0:	726f7774 6f54006b 616d206f 6f20796e     twork.Too many o
    2be0:	206e6570 656c6966 6e692073 73797320     pen files in sys
    2bf0:	006d6574 656c6946 73656420 70697263     tem.File descrip
    2c00:	20726f74 756c6176 6f742065 616c206f     tor value too la
    2c10:	00656772 20746f4e 68632061 63617261     rge.Not a charac
    2c20:	20726574 69766564 54006563 20747865     ter device.Text 
    2c30:	656c6966 73756220 69460079 7420656c     file busy.File t
    2c40:	6c206f6f 65677261 736f4800 73692074     oo large.Host is
    2c50:	726e7520 68636165 656c6261 206f4e00      unreachable.No 
    2c60:	63617073 656c2065 6f207466 6564206e     space left on de
    2c70:	65636976 746f4e00 70757320 74726f70     vice.Not support
    2c80:	49006465 67656c6c 73206c61 006b6565     ed.Illegal seek.
    2c90:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
    2ca0:	65747379 6f54006d 616d206f 6c20796e     ystem.Too many l
    2cb0:	736b6e69 6f724200 206e656b 65706970     inks.Broken pipe
    2cc0:	74614d00 616d6568 73636974 67726120     .Mathematics arg
    2cd0:	6e656d75 756f2074 666f2074 6d6f6420     ument out of dom
    2ce0:	206e6961 6620666f 74636e75 006e6f69     ain of function.
    2cf0:	75736552 7420746c 6c206f6f 65677261     Result too large
    2d00:	206f4e00 7373656d 20656761 6420666f     .No message of d
    2d10:	72697365 74206465 00657079 6e656449     esired type.Iden
    2d20:	69666974 72207265 766f6d65 49006465     tifier removed.I
    2d30:	67656c6c 62206c61 20657479 75716573     llegal byte sequ
    2d40:	65636e65 61654400 636f6c64 654e006b     ence.Deadlock.Ne
    2d50:	726f7774 7369206b 726e7520 68636165     twork is unreach
    2d60:	656c6261 206f4e00 6b636f6c 746f4e00     able.No lock.Not
    2d70:	73206120 61657274 7453006d 6d616572      a stream.Stream
    2d80:	636f6920 74206c74 6f656d69 4e007475      ioctl timeout.N
    2d90:	7473206f 6d616572 73657220 6372756f     o stream resourc
    2da0:	56007365 75747269 63206c61 75637269     es.Virtual circu
    2db0:	69207469 6f672073 5000656e 6f746f72     it is gone.Proto
    2dc0:	206c6f63 6f727265 6e550072 776f6e6b     col error.Unknow
    2dd0:	7270206e 636f746f 4d006c6f 69746c75     n protocol.Multi
    2de0:	20706f68 65747461 6574706d 61420064     hop attempted.Ba
    2df0:	656d2064 67617373 75460065 6974636e     d message.Functi
    2e00:	6e206e6f 6920746f 656c706d 746e656d     on not implement
    2e10:	44006465 63657269 79726f74 746f6e20     ed.Directory not
    2e20:	706d6520 46007974 20656c69 7020726f      empty.File or p
    2e30:	20687461 656d616e 6f6f7420 6e6f6c20     ath name too lon
    2e40:	6f540067 616d206f 7320796e 6f626d79     g.Too many symbo
    2e50:	2063696c 6b6e696c 6f4e0073 66756220     lic links.No buf
    2e60:	20726566 63617073 76612065 616c6961     fer space availa
    2e70:	00656c62 64206f4e 00617461 72646441     ble.No data.Addr
    2e80:	20737365 696d6166 6e20796c 7320746f     ess family not s
    2e90:	6f707075 64657472 20796220 746f7270     upported by prot
    2ea0:	6c6f636f 6d616620 00796c69 746f7250     ocol family.Prot
    2eb0:	6c6f636f 6f727720 7420676e 20657079     ocol wrong type 
    2ec0:	20726f66 6b636f73 53007465 656b636f     for socket.Socke
    2ed0:	706f2074 74617265 206e6f69 6e206e6f     t operation on n
    2ee0:	732d6e6f 656b636f 72500074 636f746f     on-socket.Protoc
    2ef0:	6e206c6f 6120746f 6c696176 656c6261     ol not available
    2f00:	6e6f4300 7463656e 206e6f69 75666572     .Connection refu
    2f10:	00646573 6e6e6f43 69746365 72206e6f     sed.Connection r
    2f20:	74657365 20796220 72656570 64644100     eset by peer.Add
    2f30:	73736572 726c6120 79646165 206e6920     ress already in 
    2f40:	00657375 72646441 20737365 20746f6e     use.Address not 
    2f50:	69617661 6c62616c 6f530065 61777466     available.Softwa
    2f60:	63206572 65737561 6f632064 63656e6e     re caused connec
    2f70:	6e6f6974 6f626120 53007472 656b636f     tion abort.Socke
    2f80:	73692074 746f6e20 6e6f6320 7463656e     t is not connect
    2f90:	53006465 656b636f 73692074 726c6120     ed.Socket is alr
    2fa0:	79646165 6e6f6320 7463656e 4f006465     eady connected.O
    2fb0:	61726570 6e6f6974 6e616320 656c6563     peration cancele
    2fc0:	74530064 20657461 20746f6e 6f636572     d.State not reco
    2fd0:	61726576 00656c62 76657250 73756f69     verable.Previous
    2fe0:	6e776f20 64207265 00646569 7265704f      owner died.Oper
    2ff0:	6f697461 6f6e206e 75732074 726f7070     ation not suppor
    3000:	20646574 73206e6f 656b636f 61560074     ted on socket.Va
    3010:	2065756c 206f6f74 6772616c 6f662065     lue too large fo
    3020:	65642072 656e6966 61642064 74206174     r defined data t
    3030:	00657079 7373654d 20656761 206f6f74     ype.Message too 
    3040:	676e6f6c 6e6f4300 7463656e 206e6f69     long.Connection 
    3050:	656d6974 756f2064 00000074              timed out...

0000305c <__sf_fake_stderr>:
	...

0000307c <__sf_fake_stdin>:
	...

0000309c <__sf_fake_stdout>:
	...
    30bc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    30cc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    30dc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    30ec:	00006665                                ef..

000030f0 <_init>:
    30f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30f2:	bf00      	nop
    30f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    30f6:	bc08      	pop	{r3}
    30f8:	469e      	mov	lr, r3
    30fa:	4770      	bx	lr

000030fc <__init_array_start>:
    30fc:	00000289 	.word	0x00000289

00003100 <_fini>:
    3100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3102:	bf00      	nop
    3104:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3106:	bc08      	pop	{r3}
    3108:	469e      	mov	lr, r3
    310a:	4770      	bx	lr

0000310c <__fini_array_start>:
    310c:	00000265 	.word	0x00000265
